# TODO:
# Before we include the FP & SIMD registers in context switch,
# we should not enable the FP & SIMD access for kernel. As GCC will
# the FP & SIMD registers to pass parameters, we use -mgeneral-regs-only
# flag to force GCC to use generic registers
ifeq ($(CONFIG_FPSIMD),y)
ARCHFLAGS     += -D__ARM_64__
else
ARCHFLAGS     += -D__ARM_64__ -mgeneral-regs-only
endif
ARCHFLAGS-$(call gcc_version_ge,9,4) += -mno-outline-atomics

# Disable FPU for trap/exception/interrupt handlers
ISR_ARCHFLAGS += -D__ARM_64__ -mgeneral-regs-only
ISR_ARCHFLAGS-$(call gcc_version_ge,9,4) += -mno-outline-atomics

CINCLUDES   += -I$(CONFIG_UK_BASE)/arch/arm/arm64/include
ASINCLUDES  += -I$(CONFIG_UK_BASE)/arch/arm/arm64/include
CXXINCLUDES += -I$(CONFIG_UK_BASE)/arch/arm/arm64/include

# Architecture Extensions
#
# Define these in the order of arch revision, to allow march
# to be overwritten to the highest version required by the
# selected extensions.
ifeq ($(CONFIG_ARM64_FEAT_PAUTH),y)
# Min GCC >= 9 to avoid dealing with deprecated
# msign-return-address here and in macros
$(call error_if_gcc_version_lt,9,0)
ARCH_REV := armv8.3-a
BRANCH_PROTECTION := pac-ret+leaf
endif

ifeq ($(CONFIG_ARM64_FEAT_BTI),y)
# Min GCC >= 10, due to buggy GCC-9.
# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94697
$(call error_if_gcc_version_lt,10,0)
ARCH_REV := armv8.5-a
ifeq ($(BRANCH_PROTECTION),)
	BRANCH_PROTECTION := bti
else
	BRANCH_PROTECTION := standard
endif
endif

ifeq ($(CONFIG_ARM64_FEAT_MTE),y)
# MTE support introduced in GCC-10
$(call error_if_gcc_version_lt,10,0)
ARCH_REV := armv8.5-a
ARCH_OPT := $(ARCH_OPT)+memtag
endif

ifeq ($(CONFIG_ARM64_FEAT_RNG),y)
# FEAT_RNG support introduced in GCC-9
$(call error_if_gcc_version_lt,9,0)
ARCH_REV := armv8.5-a
ARCH_OPT := $(ARCH_OPT)+rng
endif

ifdef ARCH_REV
ARCHFLAGS-y += -march=$(ARCH_REV)$(ARCH_OPT)
ISR_ARCHFLAGS-y += -march=$(ARCH_REV)$(ARCH_OPT)
endif

ifdef BRANCH_PROTECTION
ARCHFLAGS-y += -mbranch-protection=$(BRANCH_PROTECTION)
ISR_ARCHFLAGS-y += -mbranch-protection=$(BRANCH_PROTECTION)
endif

ifeq ($(CONFIG_MCPU_ARM64_NATIVE),y)
ARCHFLAGS     += -mcpu=native
ISR_ARCHFLAGS += -mcpu=native
endif

ifeq ($(CONFIG_MCPU_ARM64_GENERIC),y)
ARCHFLAGS     += -mcpu=generic -mtune=generic
ISR_ARCHFLAGS += -mcpu=generic -mtune=generic
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A53),y)
ARCHFLAGS     += -mcpu=cortex-a53 -mtune=cortex-a53
ISR_ARCHFLAGS += -mcpu=cortex-a53 -mtune=cortex-a53
endif

# For erratum 835769
ifeq ($(CONFIG_ARM64_ERRATUM_835769),y)
ARCHFLAGS     += -mfix-cortex-a53-835769
ISR_ARCHFLAGS += -mfix-cortex-a53-835769
endif

# For erratum 843419
ifeq ($(CONFIG_ARM64_ERRATUM_843419),y)
ifeq ($(call have_clang),y)
$(error The workaround for erratum 843419 is only supported with GCC)
endif
ARCHFLAGS     += -mfix-cortex-a53-843419
ISR_ARCHFLAGS += -mfix-cortex-a53-843419
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A57),y)
ARCHFLAGS     += -mcpu=cortex-a57 -mtune=cortex-a57
ISR_ARCHFLAGS += -mcpu=cortex-a57 -mtune=cortex-a57
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A57_A53),y)
ifeq ($(call have_clang),y)
$(error Cortex A57-A53 CPU model is only supported with GCC)
endif
ARCHFLAGS     += -mcpu=cortex-a57.cortex-a53
ARCHFLAGS     += -mtune=cortex-a57.cortex-a53
ISR_ARCHFLAGS += -mcpu=cortex-a57.cortex-a53
ISR_ARCHFLAGS += -mtune=cortex-a57.cortex-a53
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A72),y)
ARCHFLAGS     += -mcpu=cortex-a72 -mtune=cortex-a72
ISR_ARCHFLAGS += -mcpu=cortex-a72 -mtune=cortex-a72
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A72_A53),y)
ifeq ($(call have_clang),y)
$(error Cortex A72-A53 CPU model is only supported with GCC)
endif
ARCHFLAGS     += -mcpu=cortex-a72.cortex-a53
ARCHFLAGS     += -mtune=cortex-a72.cortex-a53
ISR_ARCHFLAGS += -mcpu=cortex-a72.cortex-a53
ISR_ARCHFLAGS += -mtune=cortex-a72.cortex-a53
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A35),y)
ARCHFLAGS     += -mcpu=cortex-a35 -mtune=cortex-a35
ISR_ARCHFLAGS += -mcpu=cortex-a35 -mtune=cortex-a35
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A73),y)
ARCHFLAGS     += -mcpu=cortex-a73 -mtune=cortex-a73
ISR_ARCHFLAGS += -mcpu=cortex-a73 -mtune=cortex-a73
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A73_A35),y)
ifeq ($(call have_clang),y)
$(error Cortex A73-A35 CPU model is only supported with GCC)
endif
ARCHFLAGS     += -mcpu=cortex-a73.cortex-a35
ARCHFLAGS     += -mtune=cortex-a73.cortex-a35
ISR_ARCHFLAGS += -mcpu=cortex-a73.cortex-a35
ISR_ARCHFLAGS += -mtune=cortex-a73.cortex-a35
endif

ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A73_A53),y)
ifeq ($(call have_clang),y)
$(error Cortex A73-A53 CPU model is only supported with GCC)
endif
ARCHFLAGS     += -mcpu=cortex-a73.cortex-a53
ARCHFLAGS     += -mtune=cortex-a73.cortex-a53
ISR_ARCHFLAGS += -mcpu=cortex-a73.cortex-a53
ISR_ARCHFLAGS += -mtune=cortex-a73.cortex-a53
endif

# GCC supports -mcpu=cortex-a55 for arm64 from 8.0
# Clang supports it from 9.0, the minimum required version
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A55),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,8,0)
endif
ARCHFLAGS     += -mcpu=cortex-a55 -mtune=cortex-a55
ISR_ARCHFLAGS += -mcpu=cortex-a55 -mtune=cortex-a55
endif

# GCC support -mcpu=cortex-a75 for arm64 from 8.0
# Clang supports it from 9.0, the minimum required version
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A75),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,8,0)
endif
ARCHFLAGS     += -mcpu=cortex-a75 -mtune=cortex-a75
ISR_ARCHFLAGS += -mcpu=cortex-a75 -mtune=cortex-a75
endif

# GCC support -mcpu=cortex-a75.cortex-a55 for arm64 from 8.0
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A75_A55),y)
$(call error_if_gcc_version_lt,8,0)
ARCHFLAGS     += -mcpu=cortex-a75.cortex-a55
ARCHFLAGS     += -mtune=cortex-a75.cortex-a55
ISR_ARCHFLAGS += -mcpu=cortex-a75.cortex-a55
ISR_ARCHFLAGS += -mtune=cortex-a75.cortex-a55
endif

# GCC support -mcpu=cortex-a76 for arm64 from 9.1
# Clang supports it from 9.0, the minimum required version
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A76),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,9,1)
endif
ARCHFLAGS     += -mcpu=cortex-a76 -mtune=cortex-a76
ISR_ARCHFLAGS += -mcpu=cortex-a76 -mtune=cortex-a76
endif

# GCC support -mcpu=cortex-a76.cortex-a55 for arm64 from 9.1
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A76_A55),y)
$(call error_if_gcc_version_lt,9,1)
ARCHFLAGS     += -mcpu=cortex-a76.cortex-a55
ARCHFLAGS     += -mtune=cortex-a76.cortex-a55
ISR_ARCHFLAGS += -mcpu=cortex-a76.cortex-a55
ISR_ARCHFLAGS += -mtune=cortex-a76.cortex-a55
endif

# GCC supports -mcpu=neoverse-n1 for arm64 from 9.1
# Clang supports -mcpu=neoverse-n1 for arm64 from 10.0
ifeq ($(CONFIG_MCPU_ARM64_NEOVERSE_N1),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,9,1)
else
$(call error_if_clang_version_lt,10,0)
endif
ARCHFLAGS     += -mcpu=neoverse-n1 -mtune=neoverse-n1
ISR_ARCHFLAGS += -mcpu=neoverse-n1 -mtune=neoverse-n1
endif

# GCC supports -mcpu=neoverse-e1 for arm64 from 9.1
# Clang supports -mcpu=neoverse-e1 for arm64 from 10.0
ifeq ($(CONFIG_MCPU_ARM64_NEOVERSE_E1),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,9,1)
else
$(call error_if_clang_version_lt,10,0)
endif
ARCHFLAGS     += -mcpu=neoverse-e1 -mtune=neoverse-e1
ISR_ARCHFLAGS += -mcpu=neoverse-e1 -mtune=neoverse-e1
endif

# GCC supports -mcpu=cortex-a34 for arm64 from 10.1
# Clang supports -mcpu=cortex-a34 for arm64 from 11.0
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A34),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,11,0)
endif
ARCHFLAGS     += -mcpu=cortex-a34 -mtune=cortex-a34
ISR_ARCHFLAGS += -mcpu=cortex-a34 -mtune=cortex-a34
endif

# GCC supports -mcpu=cortex-a65 for arm64 from 10.1
# Clang supports -mcpu=cortex-a65 for arm64 from 10.0
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A65),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,10,0)
endif
ARCHFLAGS     += -mcpu=cortex-a65 -mtune=cortex-a65
ISR_ARCHFLAGS += -mcpu=cortex-a65 -mtune=cortex-a65
endif

# GCC supports -mcpu=cortex-a65ae for arm64 from 10.1
# Clang supports -mcpu=cortex-a65ae for arm64 from 10.0
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A65AE),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,10,0)
endif
ARCHFLAGS     += -mcpu=cortex-a65ae -mtune=cortex-a65ae
ISR_ARCHFLAGS += -mcpu=cortex-a65ae -mtune=cortex-a65ae
endif

# GCC supports -mcpu=cortex-a76ae for arm64 from 10.1
# Clang supports it from 9.0, the minimum required version
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A76AE),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
endif
ARCHFLAGS     += -mcpu=cortex-a76ae -mtune=cortex-a76ae
ISR_ARCHFLAGS += -mcpu=cortex-a76ae -mtune=cortex-a76ae
endif

# GCC supports -mcpu=cortex-a77 for arm64 from 10.1
# Clang supports -mcpu=cortex-a77 for arm64 from 11.0
ifeq ($(CONFIG_MCPU_ARM64_CORTEX_A77),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,11,0)
endif
ARCHFLAGS     += -mcpu=cortex-a77 -mtune=cortex-a77
ISR_ARCHFLAGS += -mcpu=cortex-a77 -mtune=cortex-a77
endif

# GCC supports -mcpu=neoverse-n2 for arm64 from 10.1
ifeq ($(CONFIG_MCPU_ARM64_NEOVERSE_N2),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,12,0)
endif
ARCHFLAGS     += -mcpu=neoverse-n2 -mtune=neoverse-n2
ISR_ARCHFLAGS += -mcpu=neoverse-n2 -mtune=neoverse-n2
endif

# GCC support -mcpu=neoverse-v1 for arm64 from 10.1
ifeq ($(CONFIG_MCPU_ARM64_NEOVERSE_V1),y)
ifeq ($(call have_gcc),y)
$(call error_if_gcc_version_lt,10,1)
else
$(call error_if_clang_version_lt,12,0)
endif
ARCHFLAGS     += -mcpu=neoverse-v1 -mtune=neoverse-v1
ISR_ARCHFLAGS += -mcpu=neoverse-v1 -mtune=neoverse-v1
endif

$(eval $(call addlib,libarm64arch))
LIBARM64ARCH_SRCS-$(CONFIG_ARM64_FEAT_MTE) += $(CONFIG_UK_BASE)/arch/arm/arm64/memtag.c
