ifeq (x86_64,$(CONFIG_UK_ARCH))
ifeq ($(CONFIG_KVM_BOOT_PROTO_MULTIBOOT),y)
KVM_LDFLAGS-y += -Wl,-m,elf_x86_64
KVM_LDFLAGS-y += -Wl,--entry=_multiboot_entry
ELF64_TO_32 = y
else ifeq ($(CONFIG_KVM_BOOT_PROTO_LXBOOT),y)
KVM_LDFLAGS-y += -Wl,--entry=_lxboot_entry
LINUX_HDR := y
else ifeq ($(CONFIG_KVM_BOOT_PROTO_EFI_STUB),y)
KVM_LDFLAGS-y += -Wl,--entry=uk_efi_entry64
KVM_LDFLAGS-y += -Wl,-m,elf_x86_64
endif
else ifeq (arm64,$(CONFIG_UK_ARCH))
ifeq ($(CONFIG_KVM_BOOT_PROTO_LXBOOT),y)
endif
ifeq ($(CONFIG_KVM_BOOT_PROTO_EFI_STUB),y)
KVM_LDFLAGS-y += -Wl,--entry=uk_efi_entry64
KVM_LDFLAGS-y += -Wl,-m,aarch64elf
KVM_LINK_LIBGCC_FLAG := -lgcc
else
KVM_LDFLAGS-y += -Wl,--entry=_libkvmplat_entry
KVM_LDFLAGS-y += -Wl,-m,aarch64elf
KVM_LINK_LIBGCC_FLAG := -lgcc
endif
endif

##
## Link image
##
ifeq ($(CONFIG_KVM_VMM_QEMU),y)
KVM_VMM := qemu
else ifeq ($(CONFIG_KVM_VMM_FIRECRACKER),y)
KVM_VMM := fc
else
KVM_VMM := kvm
endif

ifneq ($(UK_IMAGE_NAME_OVERWRITE),)
KVM_IMAGE := $(BUILD_DIR)/$(UK_IMAGE_NAME_OVERWRITE)
else
KVM_IMAGE := $(BUILD_DIR)/$(CONFIG_UK_NAME)_$(KVM_VMM)-$(CONFIG_UK_ARCH)
endif
KVM_DEBUG_IMAGE := $(KVM_IMAGE).dbg

KVM_LD_SCRIPT_FLAGS := $(addprefix -Wl$(comma)-dT$(comma),\
			 $(UK_PLAT_KVM_DEF_LDS))
KVM_LD_SCRIPT_FLAGS += $(addprefix -Wl$(comma)-T$(comma),\
			$(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y))

$(KVM_DEBUG_IMAGE): $(KVM_ALIBS) $(KVM_ALIBS-y) $(KVM_OLIBS) $(KVM_OLIBS-y) \
		    $(UK_ALIBS) $(UK_ALIBS-y) $(UK_OLIBS) $(UK_OLIBS-y) \
		    $(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y) \
		    $(UK_PLAT_KVM_DEF_LDS) $(UK_LDEPS)
	$(call build_cmd,LD,,$@,\
	       $(LD) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			$(KVM_OLIBS) $(KVM_OLIBS-y) \
			$(UK_OLIBS) $(UK_OLIBS-y) \
			-Wl$(comma)--start-group \
			$(KVM_ALIBS) $(KVM_ALIBS-y) \
			$(UK_ALIBS) $(UK_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			$(LDFLAGS) $(LDFLAGS-y) \
			$(KVM_LD_SCRIPT_FLAGS) \
			-o $@)
ifeq ($(CONFIG_OPTIMIZE_PIE),y)
	$(call build_uk_reloc,$@)
endif

$(KVM_IMAGE): $(KVM_IMAGE).dbg
	$(call build_cmd,SCSTRIP,,$@,\
		$(STRIP) -s \
			$(SECT_STRIP_FLAGS) $(SECT_STRIP_FLAGS-y) \
			$(KVM_STRIPFLAGS) \
			$< -o $@ 2>&1 | \
			{ $(GREP) -Ev \
				"Empty loadable segment detected|section.*lma.*adjusted to.*" || \
				true; })
	$(call build_bootinfo,$@)
ifeq ($(ELF64_TO_32),y)
	$(call build_multiboot,$@)
endif
ifeq ($(CONFIG_KVM_BOOT_PROTO_EFI_STUB),y)
	$(call build_efi,$@)
endif
ifeq ($(LINUX_HDR),y)
	$(call build_linux,$@,$<)
endif

$(KVM_IMAGE).sym: $(KVM_DEBUG_IMAGE)
	$(call build_cmd,NM,,$@, $(NM) -n $< > $@)

$(KVM_IMAGE).gz: $(KVM_IMAGE)
	$(call build_cmd,GZ,,$@, $(GZIP) -f -9 -c $< >$@)

# register images to the build
ifeq ($(CONFIG_PLAT_KVM),y)
UK_DEBUG_IMAGES-y                     += $(KVM_DEBUG_IMAGE)
UK_IMAGES-y                           += $(KVM_IMAGE)
UK_IMAGES-$(CONFIG_OPTIMIZE_SYMFILE)  += $(KVM_IMAGE).sym
UK_IMAGES-$(CONFIG_OPTIMIZE_COMPRESS) += $(KVM_IMAGE).gz
endif

# ...for cleaning:
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVM_DEBUG_IMAGE).bootinfo)
