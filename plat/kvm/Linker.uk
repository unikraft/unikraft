ifeq (x86_64,$(CONFIG_UK_ARCH))
KVM_LDFLAGS-y += -Wl,-m,elf_x86_64
else ifeq (arm64,$(CONFIG_UK_ARCH))
KVM_LDFLAGS-y	 += -Wl,-m,aarch64elf
KVM_LINK_LIBGCC_FLAG	:= -lgcc
endif


##
## Link image
##
KVM_IMAGE := $(BUILD_DIR)/$(CONFIG_UK_NAME)_kvm-$(CONFIG_UK_ARCH)
KVM_DEBUG_IMAGE := $(KVM_IMAGE).dbg

KVM_LD_SCRIPT_FLAGS := $(addprefix -Wl$(comma)-dT$(comma),\
			 $(UK_PLAT_KVM_DEF_LDS))
KVM_LD_SCRIPT_FLAGS += $(addprefix -Wl$(comma)-T$(comma),\
			$(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y))
KVM_LD_SCRIPT_FLAGS_ASLR := $(addprefix -Wl$(comma)-dT$(comma),\
			 $(UK_PLAT_KVM_DEF_LDS_ASLR))
KVM_LD_SCRIPT_FLAGS_ASLR += $(addprefix -Wl$(comma)-T$(comma),\
			$(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y))

ASLR_LIBS += $(foreach P,$(UK_PLATS) $(UK_PLATS-y),\
		$(if $(call qstrip,$($(call uc,$(P))_LIBS) $($(call uc,$(P))_LIBS-y)),\
		$(foreach L,$($(call uc,$(P))_LIBS) $($(call uc,$(P))_LIBS-y), \
		$(if $(call qstrip,$($(call vprefix_lib,$(L),SRCS)) $($(call vprefix_lib,$(L),SRCS-y))), \
		$(L) \
		)))) \
		$(UK_LIBS) $(UK_LIBS-y)

ASLR_args += --base_addr=$(ASLR_BASE_ADDRESS) --file_path=$(UK_PLAT_KVM_DEF_LDS) \
	--lib_list="$(ASLR_LIBS)" --output_path=$(UK_PLAT_KVM_DEF_LDS_ASLR) 

ifeq (y,$(CONFIG_LINK_ASLR))
$(KVM_DEBUG_IMAGE): $(KVM_ALIBS) $(KVM_ALIBS-y) $(KVM_OLIBS) $(KVM_OLIBS-y) \
		    $(UK_ALIBS) $(UK_ALIBS-y) $(UK_OLIBS) $(UK_OLIBS-y)

	$(call build_cmd,ASLR,,$@,\
		$(SCRIPTS_DIR)/ASLR/ASLR.py \
			$(ASLR_args))

	$(call build_cmd,LD,,$(KVM_IMAGE).ld.o,\
	       $(LD) -r $(LIBLDFLAGS) $(LIBLDFLAGS-y) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			$(KVM_OLIBS) $(KVM_OLIBS-y) \
			$(UK_OLIBS) $(UK_OLIBS-y) \
			-Wl$(comma)--start-group \
			$(KVM_ALIBS) $(KVM_ALIBS-y) \
			$(UK_ALIBS) $(UK_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			-o $(KVM_IMAGE).ld.o)
			
	$(call build_cmd,OBJCOPY,,$(KVM_IMAGE).o,\
		$(OBJCOPY) -w -G kvmos_* -G _libkvmplat_entry \
			$(KVM_IMAGE).ld.o $(KVM_IMAGE).o)
	
	$(call build_cmd,COPY,,ASLR scripts,\
		cp $(SCRIPTS_DIR)/ASLR/relink_ELF.sh ./../; \
		cp $(SCRIPTS_DIR)/ASLR/string_script.py ./../)
	
	$(call build_cmd,LD,,$@,\
	       $(LD) $(LDFLAGS) $(LDFLAGS-y) \
		     $(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
		     $(KVM_LD_SCRIPT_FLAGS_ASLR)\
		     -L$(BUILD_DIR) \
		     -o $@)
else
$(KVM_DEBUG_IMAGE): $(KVM_ALIBS) $(KVM_ALIBS-y) $(KVM_OLIBS) $(KVM_OLIBS-y) \
		    $(UK_ALIBS) $(UK_ALIBS-y) $(UK_OLIBS) $(UK_OLIBS-y)
	$(call build_cmd,LD,,$(KVM_IMAGE).ld.o,\
	       $(LD) -r $(LIBLDFLAGS) $(LIBLDFLAGS-y) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			$(KVM_OLIBS) $(KVM_OLIBS-y) \
			$(UK_OLIBS) $(UK_OLIBS-y) \
			-Wl$(comma)--start-group \
			$(KVM_ALIBS) $(KVM_ALIBS-y) \
			$(UK_ALIBS) $(UK_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			-o $(KVM_IMAGE).ld.o)
	$(call build_cmd,OBJCOPY,,$(KVM_IMAGE).o,\
		$(OBJCOPY) -w -G kvmos_* -G _libkvmplat_entry \
			$(KVM_IMAGE).ld.o $(KVM_IMAGE).o)
	$(call build_cmd,LD,,$@,\
	       $(LD) $(LDFLAGS) $(LDFLAGS-y) \
		     $(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
		     $(KVM_LD_SCRIPT_FLAGS) \
		     $(KVM_IMAGE).o -o $@)
endif

$(KVM_IMAGE): $(KVM_IMAGE).dbg
	$(call build_cmd,SCSTRIP,,$@,\
		$(SCRIPTS_DIR)/sect-strip.py \
			$(SECT_STRIP_FLAGS) $(SECT_STRIP_FLAGS-y) \
			--with-objcopy=$(OBJCOPY) \
			$< -o $@ && \
		$(STRIP) -s $@)

$(KVM_IMAGE).sym: $(KVM_DEBUG_IMAGE)
	$(call build_cmd,NM,,$@, $(NM) -n $< > $@)

$(KVM_IMAGE).gz: $(KVM_IMAGE)
	$(call build_cmd,GZ,,$@, $(GZIP) -f -9 -c $< >$@)

# register images to the build
ifeq ($(CONFIG_PLAT_KVM),y)
UK_DEBUG_IMAGES-y                     += $(KVM_DEBUG_IMAGE)
UK_IMAGES-y                           += $(KVM_IMAGE)
UK_IMAGES-$(CONFIG_OPTIMIZE_SYMFILE)  += $(KVM_IMAGE).sym
UK_IMAGES-$(CONFIG_OPTIMIZE_COMPRESS) += $(KVM_IMAGE).gz
endif

# ...for cleaning:
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVM_IMAGE).o)
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVM_IMAGE).ld.o)
