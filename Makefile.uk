################################################################################
#
# Global Unikraft definitions
#
################################################################################

COMPFLAGS    += -nostdlib
COMPFLAGS    += -U __linux__ -U __FreeBSD__ -U __sun__
COMPFLAGS-$(call have_gcc)	+= -fno-tree-sra -fno-split-stack -nostdinc

ifneq ($(HAVE_STACKPROTECTOR),y)
COMPFLAGS    += -fno-stack-protector
endif
COMPFLAGS    += -Wall -Wextra

ASFLAGS      += -D__ASSEMBLY__

ASINCLUDES   += -I$(CONFIG_UK_BASE)/include
CINCLUDES    += -I$(CONFIG_UK_BASE)/include
CXXINCLUDES  += -I$(CONFIG_UK_BASE)/include
GOCINCLUDES  += -I$(CONFIG_UK_BASE)/include

RUSTCFLAGS-y	+= --emit=obj --crate-type=rlib --edition=2018 \
		-Cpanic=abort -Cembed-bitcode=n \
		-Zbinary_dep_depinfo=y -Zsymbol-mangling-version=v0 \
		-Cforce-unwind-tables=n -Ccodegen-units=1 \
		-Dunsafe_op_in_unsafe_fn -Drust_2018_idioms


RUSTCFLAGS-$(CONFIG_OPTIMIZE_NONE)         += -Copt-level="0"
RUSTCFLAGS-$(CONFIG_OPTIMIZE_SIZE)         += -Copt-level="s"
RUSTCFLAGS-$(CONFIG_OPTIMIZE_PERF)         += -Copt-level="2"

RUSTCFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL0)     += -Cdebuginfo=0
RUSTCFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL1)     += -Cdebuginfo=1
RUSTCFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL2)     += -Cdebuginfo=2
# NOTE: There is not level 3 in rustc
RUSTCFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL3)     += -Cdebuginfo=2

# NOTE: rustc supports LTO only with clang
ifeq ($(call have_clang),y)
RUSTCFLAGS-$(CONFIG_OPTIMIZE_LTO)	+= -Clinker-plugin-lto
else
RUSTCFLAGS-y	+= -Cembed-bitcode=n -Clto=n
endif

LIBLDFLAGS  += -nostdlib -Wl,-r -Wl,-d -Wl,--build-id=none -no-pie
LIBLDFLAGS-$(call have_gcc)	+= -nostdinc

# Set the text and data sections to be readable and writable. Also,
# do not page-align the data segment. If the output format supports
# Unix style magic numbers, mark the output as OMAGIC.
LDFLAGS	+= -nostdlib -Wl,--omagic -Wl,--build-id=none
LDFLAGS-$(call have_gcc)	+= -nostdinc

COMPFLAGS-$(CONFIG_OPTIMIZE_NONE)         += -O0 -fno-optimize-sibling-calls -fno-tree-vectorize
COMPFLAGS-$(CONFIG_OPTIMIZE_SIZE)         += -Os
COMPFLAGS-$(CONFIG_OPTIMIZE_PERF)         += -O2
ifeq ($(CONFIG_OPTIMIZE_NOOMITFP),y)
COMPFLAGS-y  += -fno-omit-frame-pointer
else
COMPFLAGS-y  += -fomit-frame-pointer -D __OMIT_FRAMEPOINTER__
endif

COMPFLAGS-$(CONFIG_OPTIMIZE_DEADELIM)     += -fdata-sections -ffunction-sections
LDFLAGS-$(CONFIG_OPTIMIZE_DEADELIM)       += -Wl,--gc-sections

# LTO requires the compiler flags to be handed over also for linking
COMPFLAGS-$(CONFIG_OPTIMIZE_LTO)          += -flto
LIBLDFLAGS-$(CONFIG_OPTIMIZE_LTO)         += $(COMPFLAGS) $(COMPFLAGS-y) $(ARCHFLAGS) $(ARCHFLAGS-y)
LDFLAGS-$(CONFIG_OPTIMIZE_LTO)            += $(COMPFLAGS) $(COMPFLAGS-y) $(ARCHFLAGS) $(ARCHFLAGS-y)

COMPFLAGS-$(CONFIG_OPTIMIZE_WARNISERROR)  += -Werror

DBGFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL0)     += -g0
DBGFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL1)     += -g1
DBGFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL2)     += -g2
DBGFLAGS-$(CONFIG_DEBUG_SYMBOLS_LVL3)     += -g3

COMPFLAGS     += -D __Unikraft__ -DUK_CODENAME="$(UK_CODENAME)"
COMPFLAGS     += -DUK_VERSION=$(UK_VERSION).$(UK_SUBVERSION)
COMPFLAGS     += -DUK_FULLVERSION=$(UK_FULLVERSION)
ISR_ARCHFLAGS += -D__INTERRUPTSAFE__

M4FLAGS      += -D __Unikraft__ -DUK_CODENAME="$(UK_CODENAME)"
M4FLAGS      += -DUK_VERSION=$(UK_VERSION).$(UK_SUBVERSION)

# If GCC supports "-no-pie" flag, we will add this flag to link flags to
# override "pie" option, because some distributions will set
# "--enable-default-pie" by default.
COMPFLAGS-$(call gcc_version_ge,6,1)	+= -fno-PIC
LDFLAGS-$(call gcc_version_ge,6,1)	+= -no-pie
ifeq ($(call gcc_version_ge,10,0),y)
COMPFLAGS-y += -fhosted -ffreestanding -fno-tree-loop-distribute-patterns
LIBLDFLAGS-$(CONFIG_OPTIMIZE_LTO) += -flinker-output=nolto-rel
LDFLAGS-$(CONFIG_OPTIMIZE_LTO) += -flinker-output=nolto-rel
endif

COMPFLAGS-$(call have_clang)	+= -fno-builtin -fno-PIC
LDFLAGS-$(call have_clang)	+= -no-pie
