/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

#ifndef _NEW_
#define _NEW_

#include <sgx_defs.h>
#include <stddef.h>
#include <exception>


namespace std
{
    typedef void (*new_handler)();  // The type of the function called when allocation fails.

	struct nothrow_t {};            // placement new tag type to suppress exceptions
	const nothrow_t nothrow = {};   // constant for placement new tag

	/*
	 * The function to call when allocation fails.  By default, there is no
	 * handler and a bad allocation exception is thrown if an allocation fails.
	 */
	new_handler set_new_handler(new_handler handler);
};

void* SGXAPI operator new (size_t);
void* SGXAPI operator new[] (size_t);

void* SGXAPI operator new (size_t, const std::nothrow_t&);
inline void* SGXAPI operator new (size_t, void* __p)  {return __p;};
void* SGXAPI operator new[] (size_t, const std::nothrow_t&);
inline void* SGXAPI operator new[] (size_t, void* __p)  {return __p;};

void SGXAPI operator delete (void*);
void SGXAPI operator delete (void*, const std::nothrow_t&);
inline void SGXAPI operator delete (void*, void*){};
void SGXAPI operator delete[] (void*);
void SGXAPI operator delete[] (void*, const std::nothrow_t&);
inline void SGXAPI operator delete[] (void*, void*){};

#endif /* _NEW_ */
