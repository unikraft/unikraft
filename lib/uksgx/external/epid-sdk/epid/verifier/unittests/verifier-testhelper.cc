/*############################################################################
  # Copyright 2016-2017 Intel Corporation
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  ############################################################################*/

/*!
 * \file
 * \brief Test fixture class for EpidVerifier.
 */

#include "epid/verifier/unittests/verifier-testhelper.h"

const G1ElemStr EpidVerifierTest::kG1IdentityStr = {
    {{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}},
    {{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}}};

const GroupPubKey EpidVerifierTest::kPubKeyStr = {
    // gid
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x2A,
    },
    // h1
    {{0xB3, 0x6F, 0xFF, 0x81, 0xE2, 0x1B, 0x17, 0xEB, 0x3D, 0x75, 0x3D,
      0x61, 0x7E, 0x27, 0xB0, 0xCB, 0xD0, 0x6D, 0x8F, 0x9D, 0x64, 0xCE,
      0xE3, 0xCE, 0x43, 0x4C, 0x62, 0xFD, 0xB5, 0x80, 0xE0, 0x99},
     {0x3A, 0x07, 0x56, 0x80, 0xE0, 0x88, 0x59, 0xA4, 0xFD, 0xB5, 0xB7,
      0x9D, 0xE9, 0x4D, 0xAE, 0x9C, 0xEE, 0x3D, 0x66, 0x42, 0x82, 0x45,
      0x7E, 0x7F, 0xD8, 0x69, 0x3E, 0xA1, 0x74, 0xF4, 0x59, 0xEE}},
    // h2
    {{0xD2, 0x74, 0x2E, 0x9F, 0x63, 0xC2, 0x51, 0x8E, 0xD5, 0xDB, 0xCA,
      0x1C, 0x54, 0x74, 0x10, 0x7B, 0xDC, 0x99, 0xED, 0x42, 0xD5, 0x5B,
      0xA7, 0x04, 0x29, 0x66, 0x61, 0x63, 0xBC, 0xDD, 0x7F, 0xE1},
     {0x76, 0x5D, 0xC0, 0x6E, 0xE3, 0x14, 0xAC, 0x72, 0x48, 0x12, 0x0A,
      0xA6, 0xE8, 0x5B, 0x08, 0x7B, 0xDA, 0x3F, 0x51, 0x7D, 0xDE, 0x4C,
      0xEA, 0xCB, 0x93, 0xA5, 0x6E, 0xCC, 0xE7, 0x8E, 0x10, 0x84}},
    // w
    {{{0xBD, 0x19, 0x5A, 0x95, 0xE2, 0x0F, 0xCA, 0x1C, 0x50, 0x71, 0x94,
       0x51, 0x40, 0x1B, 0xA5, 0xB6, 0x78, 0x87, 0x53, 0xF6, 0x6A, 0x95,
       0xCA, 0xC6, 0x8D, 0xCD, 0x36, 0x88, 0x07, 0x28, 0xE8, 0x96},
      {0xCA, 0x78, 0x11, 0x5B, 0xB8, 0x6A, 0xE7, 0xE5, 0xA6, 0x65, 0x7A,
       0x68, 0x15, 0xD7, 0x75, 0xF8, 0x24, 0x14, 0xCF, 0xD1, 0x0F, 0x6C,
       0x56, 0xF5, 0x22, 0xD9, 0xFD, 0xE0, 0xE2, 0xF4, 0xB3, 0xA1}},
     {{0x90, 0x21, 0xA7, 0xE0, 0xE8, 0xB3, 0xC7, 0x25, 0xBC, 0x07, 0x72,
       0x30, 0x5D, 0xEE, 0xF5, 0x6A, 0x89, 0x88, 0x46, 0xDD, 0x89, 0xC2,
       0x39, 0x9C, 0x0A, 0x3B, 0x58, 0x96, 0x57, 0xE4, 0xF3, 0x3C},
      {0x79, 0x51, 0x69, 0x36, 0x1B, 0xB6, 0xF7, 0x05, 0x5D, 0x0A, 0x88,
       0xDB, 0x1F, 0x3D, 0xEA, 0xA2, 0xBA, 0x6B, 0xF0, 0xDA, 0x8E, 0x25,
       0xC6, 0xAD, 0x83, 0x7D, 0x3E, 0x31, 0xEE, 0x11, 0x40, 0xA9}}}};

const GroupPubKey EpidVerifierTest::kPubKeyIkgfStr = {
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
     0x00, 0x00, 0x00, 0x00},  // group id
    {{{{0x45, 0xcb, 0x06, 0x04, 0xb3, 0xf7, 0x23, 0xb2, 0xd1, 0xd1, 0x0d,
        0x4f, 0x51, 0x7b, 0xbb, 0x8f, 0x71, 0x15, 0xd7, 0xf1, 0xdc, 0x15,
        0x37, 0xc8, 0xb8, 0x3d, 0x68, 0x0a, 0x18, 0xa5, 0x34, 0x14}}},
     {{{0x0c, 0xdc, 0xd9, 0x15, 0x7e, 0xba, 0x56, 0xc5, 0xe5, 0x61, 0xfa,
        0x6a, 0x86, 0xa0, 0xac, 0x6a, 0x81, 0x36, 0x6d, 0x01, 0x5f, 0x86,
        0xc0, 0x04, 0x8b, 0x1e, 0xff, 0x49, 0xd9, 0x37, 0x96, 0x66}}}},  // h1
    {{{{0xf1, 0xc3, 0x16, 0xb5, 0xc5, 0x1c, 0x67, 0xb6, 0xff, 0x28, 0x23,
        0x79, 0x59, 0xea, 0x80, 0xe6, 0x09, 0x07, 0xe7, 0xd3, 0x38, 0xec,
        0xb9, 0x16, 0x83, 0x88, 0xda, 0x64, 0xdd, 0xc4, 0x9d, 0x6a}}},
     {{{0x5c, 0xb2, 0x1c, 0x88, 0x97, 0xea, 0xaf, 0xa9, 0xf3, 0x3e, 0x07,
        0xea, 0xb6, 0x2a, 0xd5, 0x7a, 0xed, 0x32, 0xd9, 0x3d, 0x90, 0xd7,
        0xb9, 0x91, 0x08, 0x05, 0x9e, 0xe3, 0x22, 0x75, 0x06, 0x35}}}},  // h2
    {{{{{0xe5, 0xc4, 0x77, 0xad, 0x52, 0xb9, 0x7c, 0x04, 0x2d, 0x7e, 0x81,
         0xf2, 0x5d, 0x5d, 0x52, 0x7d, 0xd7, 0x1d, 0x29, 0xfb, 0x6a, 0xa7,
         0xbc, 0xb5, 0xa9, 0x1a, 0xa6, 0xfd, 0x20, 0xea, 0xf2, 0x98}}},
      {{{0xe2, 0x67, 0x33, 0x28, 0x67, 0x5f, 0xbe, 0x23, 0xa0, 0x43, 0xe8,
         0x71, 0xaa, 0xab, 0xf6, 0xf0, 0x6a, 0x2b, 0x52, 0xa8, 0x61, 0x51,
         0x22, 0x44, 0x00, 0x91, 0xd7, 0xf1, 0x7e, 0x05, 0x48, 0xdc}}}},
     {{{{0x51, 0x0c, 0xef, 0xa0, 0xf3, 0x72, 0xcd, 0x59, 0xd4, 0x7a, 0x2a,
         0x60, 0xa3, 0x62, 0x54, 0xa8, 0xb6, 0x8f, 0xed, 0x90, 0xdf, 0x3e,
         0x94, 0xe8, 0xa4, 0x89, 0x32, 0xaa, 0x52, 0x5a, 0x97, 0xae}}},
      {{{0x4c, 0x86, 0xf4, 0xba, 0xec, 0xc6, 0x36, 0x13, 0x87, 0x42, 0x5d,
         0x16, 0x49, 0x12, 0x66, 0xc5, 0xe0, 0xe4, 0x9b, 0xf9, 0x68, 0xaa,
         0xa9, 0x95, 0x81, 0x16, 0x5c, 0xd2, 0xca, 0xd4, 0x2e, 0x61}}}}}  // w
};

const GroupPubKey EpidVerifierTest::kPubKeyRevGroupIkgfStr = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0x78, 0x8a, 0xb6, 0x0f, 0x9a, 0xf5, 0xe4, 0xd1,
    0xe7, 0x39, 0x6a, 0x79, 0x6c, 0xb5, 0xd1, 0xa1, 0x83, 0xec, 0xa1, 0x01,
    0xfe, 0xe8, 0x72, 0xce, 0xce, 0x05, 0x9a, 0x4f, 0xa5, 0x17, 0x1b, 0xed,
    0x30, 0xc5, 0x00, 0xc0, 0xb4, 0xdb, 0x5e, 0xa6, 0xe2, 0x24, 0x23, 0xab,
    0xf5, 0x09, 0xf2, 0x4a, 0x7e, 0x72, 0xfa, 0xc3, 0xbf, 0x33, 0x93, 0x23,
    0x48, 0x89, 0xd2, 0x98, 0x08, 0xe1, 0x01, 0xba, 0x9d, 0xa9, 0xe5, 0x41,
    0x46, 0x2e, 0xbb, 0x9e, 0x6a, 0xfd, 0x28, 0x85, 0x94, 0xd5, 0x6e, 0x5a,
    0xfa, 0x42, 0x71, 0x6e, 0xdc, 0x7e, 0xdb, 0xd1, 0xf2, 0x84, 0x11, 0x08,
    0x4f, 0x0f, 0x22, 0x1f, 0x32, 0xbe, 0xd7, 0x6f, 0x55, 0x17, 0x17, 0x4a,
    0xa7, 0x46, 0xeb, 0xca, 0x02, 0x65, 0x53, 0xca, 0xd7, 0x93, 0x03, 0x01,
    0xe1, 0x54, 0xfc, 0xdd, 0xb4, 0x95, 0x5a, 0x5c, 0x0c, 0x8c, 0x13, 0x65,
    0x02, 0x16, 0xf0, 0xfc, 0xbb, 0x02, 0x5f, 0x87, 0x83, 0x8c, 0xd0, 0x3e,
    0x69, 0xc8, 0xf5, 0x7c, 0x09, 0xdd, 0x48, 0x65, 0x82, 0x48, 0x6f, 0xb5,
    0x35, 0x0c, 0xc4, 0x04, 0x2d, 0x83, 0x0a, 0x3e, 0xa0, 0x0f, 0x5f, 0x8e,
    0x61, 0xf7, 0xc3, 0xb5, 0x5c, 0x66, 0xf8, 0xf8, 0xa3, 0x0a, 0xc1, 0x50,
    0xcd, 0xb0, 0x44, 0x19, 0x14, 0x07, 0xf1, 0xad, 0x7a, 0xec, 0x73, 0xac,
    0x55, 0x01, 0x8a, 0xa6, 0x62, 0x9b, 0x30, 0xf3, 0xf9, 0xc5, 0xd1, 0x3d,
    0xf2, 0x36, 0x13, 0x28, 0x4d, 0xbf, 0x95, 0x88, 0x76, 0x6b, 0xb0, 0x18,
    0xd8, 0x3f, 0xa6, 0x22, 0x69, 0x13, 0x06, 0xa4, 0x04, 0xbf, 0x52, 0x8e,
    0xf0, 0x11, 0x99, 0x65, 0xb9, 0xf8, 0x57, 0x0b, 0xf6, 0xc2, 0xe8, 0xaf,
    0xee, 0xd4, 0x6e, 0xa7, 0x49, 0x7b, 0xeb, 0x8f, 0x92, 0x66, 0x45, 0xda,
    0xb4, 0x01, 0xa8, 0xee, 0x7c, 0xdf, 0x8e, 0x08};

const VerifierPrecomp EpidVerifierTest::kVerifierPrecompStr = {
    // gid
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x2A,
    },
    // e12
    {0xD8, 0x14, 0xBA, 0x4B, 0x44, 0x03, 0x55, 0x6C, 0xF6, 0x42, 0xE8, 0xF0,
     0x4C, 0xB5, 0xE7, 0xD4, 0xA2, 0xA3, 0x69, 0x47, 0xF5, 0xD4, 0xC8, 0xE9,
     0xC5, 0x5A, 0x39, 0xB5, 0x55, 0xA5, 0xD3, 0xFB, 0xF3, 0x85, 0x5A, 0x0D,
     0xD5, 0xEE, 0xDE, 0xF4, 0xA8, 0xB1, 0x8B, 0xCF, 0xA9, 0x0D, 0x29, 0xBF,
     0x86, 0x27, 0x9C, 0x1F, 0x96, 0xED, 0xD8, 0x44, 0x01, 0x35, 0x1A, 0xCE,
     0xFD, 0x4E, 0x6F, 0xA1, 0x66, 0x0D, 0x59, 0x08, 0x6D, 0xA2, 0xE4, 0x99,
     0x83, 0xDC, 0x39, 0x28, 0xB7, 0x1C, 0x1A, 0x33, 0xAD, 0xCA, 0x5C, 0x35,
     0x26, 0x1F, 0xAB, 0xBA, 0x0D, 0x53, 0xAF, 0xE0, 0x72, 0x14, 0xC5, 0xA7,
     0x2E, 0x58, 0x26, 0xC9, 0x8E, 0xFA, 0x6F, 0x62, 0xFC, 0xF0, 0x08, 0x3E,
     0xA3, 0x11, 0x3A, 0xF0, 0xB8, 0x3B, 0x2D, 0x3E, 0xEC, 0xD5, 0xBC, 0xF2,
     0x05, 0x68, 0xF4, 0x40, 0xCE, 0x2C, 0x8F, 0xDD, 0xA4, 0xE5, 0xE1, 0xB5,
     0xBE, 0xBD, 0x3E, 0xD4, 0xF6, 0x9A, 0xB3, 0x37, 0x24, 0x0D, 0xEA, 0x13,
     0xD7, 0x1F, 0xA2, 0x75, 0x68, 0xA1, 0xBE, 0x2C, 0x01, 0x42, 0x2A, 0xAE,
     0x6F, 0xAE, 0x7A, 0x72, 0x3A, 0x11, 0x03, 0x58, 0x02, 0x0D, 0xF0, 0xB0,
     0xD9, 0x6F, 0xB1, 0xE4, 0xF2, 0x70, 0xB8, 0xFF, 0x22, 0x56, 0x7C, 0xB3,
     0x80, 0xFD, 0xDF, 0xE5, 0xAB, 0xCC, 0x18, 0x7A, 0xFD, 0x91, 0xD0, 0xB0,
     0x63, 0x40, 0xD4, 0x71, 0xFA, 0x03, 0xF5, 0xF1, 0x26, 0xE1, 0xA5, 0x5A,
     0xD9, 0x6D, 0xF5, 0x5A, 0x7B, 0x2A, 0x3A, 0xFE, 0x94, 0x9E, 0x74, 0x41,
     0x79, 0x49, 0x7E, 0x48, 0x1D, 0x58, 0x5E, 0xF6, 0x98, 0xA3, 0x6E, 0x61,
     0x8E, 0x9F, 0x1F, 0xCD, 0x15, 0x01, 0x16, 0xA5, 0xE0, 0xAB, 0xD6, 0xD6,
     0x1F, 0x1C, 0xF5, 0x81, 0x76, 0xC1, 0xEC, 0x10, 0xC2, 0xCC, 0x68, 0x59,
     0x4D, 0x47, 0xEF, 0x4B, 0x7F, 0xD8, 0x78, 0x9C, 0xFE, 0x9A, 0x86, 0x7E,
     0x0C, 0xFD, 0x3E, 0x0A, 0x7A, 0x72, 0x8B, 0x14, 0x5F, 0xE6, 0x5F, 0x19,
     0xA3, 0x0A, 0x1B, 0x71, 0xDC, 0xD2, 0xAE, 0x35, 0xC3, 0x11, 0xA5, 0xD3,
     0xEA, 0xE1, 0xA9, 0xE7, 0x70, 0x0C, 0x7A, 0x39, 0x56, 0x3C, 0xE4, 0xE7,
     0xF9, 0xB6, 0xF1, 0x15, 0x40, 0xAB, 0xB6, 0xC4, 0xAD, 0xBD, 0xF4, 0xCC,
     0x13, 0xB7, 0xA8, 0xB6, 0x92, 0x1E, 0x72, 0x27, 0xA7, 0xFF, 0xD9, 0xEA,
     0x2F, 0x91, 0x96, 0x22, 0xD2, 0xC4, 0x4D, 0x80, 0xDC, 0x47, 0x66, 0x87,
     0xCC, 0xCF, 0xC5, 0x64, 0xF7, 0xB2, 0x34, 0xED, 0xD5, 0x44, 0x44, 0xCC,
     0x57, 0x41, 0xC7, 0x92, 0xB7, 0x5C, 0x12, 0xF7, 0x81, 0xF2, 0x92, 0x35,
     0x3E, 0x4B, 0xDF, 0xF8, 0xDA, 0x68, 0xAC, 0x30, 0xE3, 0xDD, 0x9E, 0x22,
     0xAA, 0x6D, 0x77, 0xDD, 0xAC, 0xD9, 0x11, 0x6E, 0xFB, 0x1A, 0x88, 0xB3},
    // e22
    {0x07, 0x3F, 0x9D, 0x47, 0x82, 0xB8, 0x3D, 0x6A, 0xE0, 0x36, 0xAB, 0xA6,
     0xFA, 0xE6, 0xD2, 0x1C, 0xC8, 0xB2, 0xD0, 0x01, 0xD4, 0x96, 0xDC, 0x2E,
     0xF8, 0x19, 0xDC, 0x70, 0x1B, 0xF9, 0x73, 0x0C, 0x2B, 0xC2, 0xE2, 0x1D,
     0x85, 0x53, 0x81, 0x51, 0xFB, 0xCA, 0x16, 0x86, 0xD4, 0x4E, 0xFD, 0x1A,
     0x59, 0xE3, 0x97, 0xC4, 0x7F, 0x99, 0xD8, 0x66, 0x08, 0xA1, 0xE4, 0x9F,
     0xBB, 0x3A, 0xCE, 0xA5, 0x23, 0x9C, 0x83, 0x13, 0xC5, 0xC8, 0xF2, 0x16,
     0x1E, 0xE8, 0xE6, 0xC5, 0x36, 0x57, 0x2C, 0xDF, 0x73, 0xB4, 0xE2, 0xB2,
     0xCB, 0xEB, 0xBB, 0xF7, 0x45, 0xD1, 0x44, 0xBD, 0x6E, 0x92, 0x95, 0x00,
     0xE5, 0x89, 0xB5, 0x91, 0x78, 0xC7, 0x44, 0xB1, 0x2F, 0x37, 0xDF, 0xFB,
     0xE7, 0x8A, 0x44, 0x3F, 0x3D, 0x06, 0x5F, 0x5B, 0x1C, 0x5F, 0xCE, 0x11,
     0x05, 0x35, 0x3C, 0xAD, 0x92, 0x7E, 0x79, 0xB8, 0xFF, 0x28, 0x05, 0xE4,
     0x04, 0x2C, 0xB6, 0x1D, 0x22, 0xAB, 0x36, 0x00, 0x5F, 0x74, 0xF1, 0xE3,
     0xF6, 0xA6, 0x68, 0xE6, 0x7B, 0x25, 0xB8, 0xCF, 0x19, 0xB0, 0x1A, 0xDD,
     0x0F, 0xAD, 0x63, 0x73, 0x62, 0x1B, 0xE7, 0x94, 0x5D, 0xBF, 0x3D, 0xF1,
     0xF9, 0x8E, 0xAB, 0x59, 0xE5, 0xD1, 0x7C, 0x62, 0xDD, 0xBC, 0x40, 0x07,
     0x70, 0x5B, 0x13, 0xF6, 0x12, 0x09, 0xB4, 0x0D, 0x3E, 0xAB, 0x8B, 0x70,
     0x60, 0x1D, 0xD4, 0x61, 0x37, 0x28, 0x98, 0x3E, 0x7E, 0xDC, 0xFD, 0xD2,
     0xC0, 0x2F, 0x4B, 0x71, 0x31, 0x34, 0xD7, 0x69, 0x41, 0x5E, 0xAA, 0x72,
     0xE4, 0xDF, 0xEB, 0xFE, 0x8D, 0xCD, 0x68, 0xFC, 0x68, 0x55, 0xBE, 0x32,
     0x7D, 0x24, 0xC5, 0x07, 0x0F, 0xA8, 0xBD, 0x5A, 0xFE, 0xE7, 0xEC, 0xDB,
     0xFD, 0x19, 0xC8, 0xA9, 0x20, 0xA2, 0x7F, 0x6C, 0xA6, 0x62, 0xEC, 0xED,
     0x9B, 0x79, 0xBF, 0x9C, 0x0E, 0x31, 0x0B, 0x25, 0x2F, 0xD3, 0xCC, 0xA0,
     0xDD, 0xB2, 0xF2, 0x69, 0x26, 0x85, 0x21, 0x06, 0x94, 0x56, 0x5F, 0x59,
     0x5C, 0xF5, 0xB7, 0x82, 0xCE, 0x0F, 0xDD, 0x40, 0xDB, 0x83, 0xAC, 0x3C,
     0x41, 0xA0, 0x1B, 0xB1, 0xAF, 0xDA, 0x55, 0xBF, 0x6B, 0x1A, 0xEF, 0xE6,
     0x90, 0xE7, 0xAA, 0x0F, 0x04, 0x3C, 0x9F, 0x5B, 0xB7, 0xCD, 0x98, 0xA8,
     0x9E, 0xFF, 0x54, 0x26, 0xC8, 0xD5, 0x5C, 0x30, 0x5E, 0xA2, 0x99, 0x8E,
     0x34, 0xD5, 0x98, 0x9F, 0xCD, 0x57, 0xD1, 0x4D, 0x1D, 0xEE, 0x01, 0x5D,
     0x5A, 0x6D, 0xB2, 0xF1, 0xCF, 0x4B, 0xC0, 0x21, 0x23, 0x96, 0x05, 0xF9,
     0xC9, 0x66, 0xE5, 0x25, 0x9D, 0xA3, 0x8E, 0x78, 0x43, 0x19, 0xC1, 0x7F,
     0x7B, 0xEF, 0xF5, 0xED, 0x00, 0xB7, 0x45, 0x1F, 0x4E, 0xA9, 0xFA, 0xE3,
     0xFF, 0x54, 0xF2, 0x21, 0x73, 0xF8, 0x6B, 0xA1, 0xC7, 0x31, 0x4D, 0x6A},
    // e2w
    {0x49, 0x0D, 0x0F, 0x2A, 0x5C, 0x6A, 0x3B, 0xAD, 0x71, 0xC9, 0x22, 0x49,
     0xE8, 0x08, 0xDD, 0xBA, 0x79, 0x57, 0xB7, 0xC7, 0x61, 0xE4, 0xDB, 0x84,
     0x68, 0x57, 0xB9, 0x30, 0x83, 0xA4, 0xDC, 0xEF, 0x70, 0x93, 0x28, 0xE2,
     0x6F, 0xB9, 0xBC, 0x15, 0x28, 0x3A, 0x30, 0xBD, 0x96, 0x83, 0xDB, 0xF2,
     0x9D, 0x1E, 0xC7, 0x64, 0x6D, 0x2E, 0x7C, 0xA2, 0xF3, 0xAA, 0x2F, 0x4B,
     0x6D, 0x86, 0x9E, 0x48, 0x20, 0x29, 0x4B, 0x1F, 0x8D, 0xC2, 0x93, 0xC3,
     0x55, 0x25, 0x8E, 0xB0, 0x8A, 0x7E, 0x64, 0x45, 0x3F, 0xF4, 0x1D, 0x16,
     0x4C, 0x88, 0x2D, 0x54, 0xBE, 0xA8, 0x67, 0x70, 0x81, 0xC5, 0xB9, 0x5C,
     0x16, 0x00, 0xEF, 0x78, 0xF6, 0x4D, 0x6A, 0xEB, 0xFD, 0xA2, 0x0D, 0x52,
     0x86, 0xF3, 0x04, 0x4B, 0xD8, 0xF0, 0x7D, 0x50, 0x8B, 0xAD, 0xC0, 0x37,
     0xDB, 0x38, 0xF2, 0x7D, 0x1F, 0x8B, 0x13, 0x83, 0x7B, 0xCC, 0xE8, 0x25,
     0xFE, 0xFA, 0x0C, 0x02, 0x05, 0x2E, 0x75, 0x12, 0xA1, 0x0A, 0x89, 0xAB,
     0xF1, 0xB2, 0x08, 0x47, 0x9A, 0xEA, 0xEF, 0x1D, 0xA4, 0x9F, 0xDE, 0x89,
     0x47, 0x3E, 0x7C, 0x5E, 0x4A, 0x40, 0xDC, 0xEC, 0xC5, 0x1B, 0x7E, 0x33,
     0x0A, 0x19, 0x69, 0x27, 0xA6, 0xCC, 0x25, 0xFC, 0xF9, 0xEB, 0xBD, 0xB7,
     0x8A, 0xDB, 0x45, 0x5F, 0x9D, 0x9E, 0x01, 0xDE, 0x3D, 0x91, 0x10, 0x99,
     0x13, 0xBF, 0xC0, 0xFA, 0x9D, 0xD4, 0x0F, 0xB3, 0x09, 0xF3, 0xA1, 0xAE,
     0x68, 0xE1, 0x1B, 0x48, 0x85, 0x9F, 0x81, 0x66, 0x91, 0xE2, 0xF0, 0x7B,
     0x29, 0xDB, 0x8F, 0x5D, 0x99, 0xA9, 0xD3, 0x39, 0x30, 0xD9, 0x1B, 0x94,
     0x2A, 0x1C, 0x5C, 0xE9, 0xC0, 0x3F, 0x6E, 0xB2, 0x27, 0xBE, 0x74, 0x7A,
     0xCA, 0xE1, 0x0F, 0x6A, 0x43, 0x2E, 0x98, 0x65, 0xAF, 0x7F, 0x6E, 0x5A,
     0x55, 0x98, 0xC1, 0x58, 0x29, 0xB3, 0x86, 0x54, 0x0F, 0x57, 0x91, 0x89,
     0x29, 0xB1, 0x98, 0x79, 0xCC, 0x95, 0x39, 0xD0, 0xAB, 0xE0, 0x9F, 0xF3,
     0xDA, 0xF9, 0x5E, 0xD9, 0x34, 0xBB, 0x72, 0xDA, 0xE5, 0x72, 0xD3, 0xF8,
     0x9B, 0xF9, 0x14, 0x84, 0x48, 0x81, 0x54, 0x4F, 0xE6, 0x2B, 0x80, 0xC8,
     0xC1, 0x79, 0xFE, 0x83, 0xFF, 0x76, 0xA3, 0x6D, 0xFE, 0x37, 0x78, 0xC5,
     0x30, 0x7A, 0x50, 0xE2, 0x5D, 0x12, 0xDC, 0x72, 0xE9, 0x58, 0x7C, 0x07,
     0x4F, 0xFF, 0x15, 0x8A, 0x97, 0x3B, 0xCB, 0x60, 0xFA, 0x4E, 0xDE, 0x8C,
     0x80, 0x3A, 0x8B, 0x0B, 0xC6, 0x1D, 0xA3, 0xCE, 0x6A, 0xB3, 0x50, 0x69,
     0x03, 0x96, 0xCA, 0xC0, 0xB6, 0x94, 0x6F, 0x8F, 0xAB, 0x6F, 0x5B, 0x00,
     0x2A, 0x1D, 0x90, 0xA7, 0x81, 0xC6, 0x15, 0x77, 0x79, 0xF3, 0x36, 0x23,
     0xD1, 0x46, 0x25, 0x58, 0x6F, 0x7B, 0x22, 0xAC, 0x4C, 0x7A, 0xF3, 0x9F},
    // eg12
    {0xA8, 0x8E, 0x9A, 0xF9, 0x25, 0x12, 0x98, 0xE2, 0xC3, 0x61, 0x2E, 0xE8,
     0xD6, 0xA6, 0x77, 0x16, 0x49, 0x04, 0x75, 0x69, 0xD1, 0x83, 0x2D, 0x3F,
     0x2A, 0x79, 0xB6, 0x9B, 0xC9, 0x1D, 0x03, 0x90, 0x2A, 0xD8, 0x11, 0x9F,
     0x26, 0x36, 0xE7, 0xE9, 0x3A, 0x05, 0x4C, 0x15, 0x49, 0x93, 0xDA, 0xE9,
     0xD0, 0x5A, 0xE4, 0x8D, 0x8A, 0xFA, 0x04, 0xF1, 0x20, 0x84, 0x56, 0xEC,
     0x3C, 0x27, 0x19, 0x5C, 0xF1, 0xAF, 0xBF, 0xF6, 0x0E, 0x58, 0x84, 0x2D,
     0x94, 0x11, 0xF4, 0xB5, 0xF4, 0x14, 0x51, 0xB0, 0x90, 0x46, 0x1A, 0x81,
     0xED, 0xCF, 0x91, 0x66, 0x58, 0xA6, 0x36, 0x3A, 0x52, 0x18, 0x5A, 0xC1,
     0x08, 0x4C, 0x99, 0xD3, 0xDC, 0xCE, 0x7F, 0xCE, 0x78, 0xE0, 0x38, 0x87,
     0x32, 0xF1, 0x80, 0x3C, 0x7B, 0x67, 0xAA, 0x6F, 0xDD, 0xE0, 0xFC, 0xCB,
     0xD0, 0xB0, 0x3A, 0x59, 0x52, 0x2A, 0x84, 0xE4, 0xF8, 0x4A, 0xFF, 0x50,
     0xA0, 0x65, 0xC4, 0xEE, 0xF4, 0x9C, 0xAA, 0x34, 0x46, 0xF9, 0xD2, 0x6C,
     0xA1, 0x61, 0x71, 0x49, 0x32, 0x25, 0x84, 0x54, 0x90, 0x44, 0xBE, 0xA4,
     0x0B, 0xF7, 0xFE, 0x26, 0x81, 0x63, 0x73, 0xF7, 0x2F, 0xF2, 0xFA, 0x24,
     0x52, 0xA4, 0xD9, 0x4C, 0xC1, 0xA7, 0xA5, 0xC3, 0x03, 0x36, 0x13, 0x9B,
     0x16, 0x45, 0x16, 0xCB, 0x4B, 0x99, 0x38, 0xF3, 0x6D, 0xC8, 0x7E, 0xAB,
     0xB3, 0x53, 0xDF, 0xB6, 0x82, 0x60, 0x12, 0x11, 0x36, 0x69, 0x0E, 0x05,
     0x31, 0x8E, 0xCF, 0xD7, 0x3F, 0x32, 0xE7, 0x95, 0x84, 0x1D, 0xC8, 0xB5,
     0xBE, 0x49, 0x17, 0x9D, 0xCF, 0xA9, 0x5A, 0x2A, 0xC4, 0x11, 0x86, 0xE8,
     0x6C, 0x02, 0x56, 0xB0, 0x25, 0x2F, 0xA0, 0x06, 0xB3, 0x62, 0xB2, 0x11,
     0xAF, 0xBE, 0xA4, 0xE8, 0x61, 0x64, 0x85, 0xFB, 0xEB, 0x1C, 0xF1, 0xBC,
     0x2C, 0xAE, 0x10, 0x51, 0x16, 0xA6, 0xC0, 0xB3, 0x86, 0x8E, 0x6D, 0x79,
     0xB6, 0xBD, 0xDE, 0x1E, 0x26, 0x06, 0x46, 0x65, 0x82, 0x84, 0x5A, 0x97,
     0xD3, 0xB7, 0x93, 0x78, 0x6B, 0x9D, 0x14, 0x33, 0x94, 0x43, 0x34, 0x04,
     0x45, 0xD1, 0x47, 0xD4, 0x2F, 0x17, 0xCF, 0xF1, 0xDD, 0xEA, 0x11, 0x52,
     0xAE, 0x01, 0x88, 0x3A, 0x10, 0xEE, 0x5C, 0x16, 0xCD, 0xB5, 0x48, 0xE9,
     0x16, 0x2C, 0x70, 0xB4, 0x1E, 0x19, 0x38, 0xE0, 0x18, 0xE9, 0xAE, 0xC5,
     0xDA, 0x74, 0x41, 0x2D, 0x70, 0x07, 0x60, 0x37, 0x27, 0x66, 0xF7, 0x00,
     0xBB, 0x79, 0x51, 0xF3, 0x7C, 0x8A, 0x2B, 0xB5, 0x69, 0x6E, 0x10, 0x1F,
     0xE0, 0x0A, 0x5E, 0xBE, 0xB4, 0x4E, 0x0E, 0x02, 0x59, 0xB5, 0xCB, 0x4A,
     0x6A, 0x86, 0x8B, 0xCC, 0xA2, 0x13, 0xA0, 0xE9, 0xF2, 0x5C, 0xB0, 0x23,
     0xB2, 0x15, 0xF9, 0xBB, 0x43, 0xC1, 0x54, 0xF4, 0xC8, 0xAB, 0x16, 0xA6}};

const VerifierPrecomp EpidVerifierTest::kVerifierPrecompIkgfStr = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xbc, 0x74, 0xd9, 0xd2, 0xcc, 0x56, 0x28, 0xfd,
    0x3d, 0x0b, 0x2b, 0x86, 0xf4, 0xc6, 0xb2, 0x25, 0x19, 0x6b, 0x5b, 0x42,
    0x35, 0x6a, 0xd9, 0x9c, 0xf9, 0xb4, 0x30, 0xcb, 0xff, 0x39, 0xbb, 0x92,
    0x41, 0x71, 0xf4, 0x49, 0xc3, 0xfd, 0x36, 0xa3, 0xe0, 0xdd, 0x83, 0xf1,
    0x34, 0x53, 0x2e, 0x16, 0x2f, 0x45, 0x06, 0x10, 0x3d, 0x9a, 0xfd, 0x22,
    0xb8, 0xf1, 0xfd, 0x52, 0x3a, 0x24, 0xc5, 0x9c, 0xdd, 0x54, 0x9c, 0xff,
    0xb0, 0x4d, 0xb9, 0xe5, 0x21, 0x62, 0x61, 0xaa, 0x76, 0xc3, 0xc1, 0x25,
    0x47, 0xe4, 0x3b, 0x62, 0xab, 0x5f, 0x2c, 0x56, 0xe1, 0x24, 0x9c, 0x21,
    0xec, 0x6b, 0x1d, 0x80, 0x1d, 0xca, 0xc5, 0x45, 0x34, 0xee, 0x4e, 0xc6,
    0x20, 0x94, 0x14, 0x98, 0x0e, 0xd6, 0x88, 0x1d, 0x69, 0xfd, 0x25, 0xd3,
    0xe3, 0x08, 0x3f, 0x62, 0x82, 0xa9, 0xf2, 0x13, 0xd6, 0x54, 0xda, 0x12,
    0xec, 0x4e, 0xd2, 0x92, 0xe1, 0x82, 0x3f, 0x54, 0xf8, 0xc7, 0x0e, 0x21,
    0x90, 0x49, 0xa1, 0x73, 0xa2, 0x03, 0xd0, 0xc7, 0x1c, 0xc2, 0x36, 0x1f,
    0xb5, 0x8e, 0x22, 0xaf, 0xb5, 0x96, 0xad, 0xba, 0xde, 0xe6, 0x45, 0xb9,
    0xee, 0x39, 0x74, 0x53, 0x62, 0x68, 0xa6, 0x37, 0x33, 0x65, 0x47, 0x3b,
    0xf2, 0xa3, 0x35, 0xd0, 0xe9, 0x50, 0x49, 0x68, 0x23, 0x9a, 0xa0, 0x33,
    0x66, 0x2f, 0x84, 0x23, 0x43, 0x95, 0x35, 0xea, 0x1d, 0xfe, 0x3a, 0xe4,
    0x45, 0x6f, 0xad, 0x86, 0x7a, 0x4b, 0xf8, 0xb7, 0x32, 0xaf, 0x79, 0x7c,
    0x45, 0x8d, 0xd9, 0x36, 0x0d, 0x66, 0xcb, 0x47, 0x07, 0xf4, 0x75, 0xae,
    0x38, 0xe1, 0x32, 0x67, 0x80, 0x73, 0x0b, 0x98, 0xb7, 0x8d, 0xa3, 0x03,
    0x94, 0x59, 0x0c, 0x04, 0xa8, 0x3e, 0xf8, 0x39, 0xc9, 0x25, 0x74, 0xb5,
    0x9c, 0x62, 0x79, 0xb9, 0xf0, 0x20, 0x0b, 0x41, 0xb1, 0x76, 0x2a, 0x93,
    0x15, 0xfa, 0x7a, 0x55, 0xe4, 0x50, 0xf3, 0xe1, 0x54, 0xf8, 0x9e, 0x42,
    0x84, 0xaf, 0xb6, 0xc2, 0x2e, 0x98, 0xd5, 0xfd, 0x31, 0xe4, 0x16, 0x2b,
    0x4d, 0x32, 0x96, 0x04, 0x4f, 0xca, 0x8b, 0x8d, 0x3c, 0x24, 0xb4, 0xc3,
    0x86, 0x3b, 0x06, 0xc9, 0x45, 0xc9, 0xb1, 0x90, 0xac, 0xc3, 0xd6, 0xec,
    0x80, 0x5b, 0x84, 0xcb, 0x5e, 0x7b, 0xc4, 0xcb, 0x63, 0x9e, 0xca, 0x09,
    0x92, 0xca, 0x70, 0xfd, 0x24, 0x2a, 0x81, 0x37, 0x5a, 0x85, 0x72, 0x4a,
    0x46, 0x2d, 0x29, 0x38, 0x8f, 0xc3, 0x59, 0xc7, 0xe9, 0x76, 0x24, 0xea,
    0xd4, 0xef, 0x06, 0x12, 0xf5, 0xab, 0xab, 0xa1, 0x59, 0x13, 0xc8, 0x1d,
    0xdf, 0x0f, 0x41, 0xbe, 0x98, 0x65, 0x00, 0x11, 0x41, 0x7c, 0x6e, 0x29,
    0x83, 0x73, 0xfd, 0x81, 0xff, 0xe8, 0xd8, 0x7f, 0xa1, 0x00, 0x62, 0x11,
    0x14, 0x38, 0x06, 0x57, 0x20, 0x81, 0xaa, 0x9e, 0xaf, 0xfe, 0xee, 0x68,
    0xee, 0x30, 0x1a, 0x83, 0xe7, 0x32, 0xc3, 0xfc, 0x69, 0xe5, 0x19, 0x29,
    0x4e, 0xee, 0xb0, 0xf1, 0x63, 0xaf, 0x41, 0x3d, 0x3b, 0xb9, 0xbb, 0x2e,
    0xde, 0xd7, 0x0b, 0xbe, 0x11, 0x8f, 0x4a, 0x94, 0x4c, 0x57, 0xf3, 0x64,
    0x38, 0x5a, 0xc6, 0xb8, 0x5d, 0xa1, 0x9d, 0xc8, 0xfa, 0x32, 0xe2, 0x08,
    0xf4, 0x26, 0x3f, 0x75, 0xb5, 0x35, 0x9a, 0xe9, 0xd6, 0x1d, 0x35, 0x41,
    0x9b, 0x20, 0x2b, 0x54, 0xb9, 0x66, 0x6c, 0xc6, 0xb7, 0x44, 0x82, 0x9b,
    0x74, 0xe8, 0x09, 0x04, 0xa4, 0xf2, 0x7a, 0x8f, 0xe8, 0x6f, 0x3c, 0xa0,
    0x18, 0xab, 0x66, 0xf6, 0x39, 0x34, 0x70, 0xf3, 0xa6, 0xd3, 0xc9, 0xe1,
    0x97, 0xe2, 0xdc, 0x4d, 0xca, 0x02, 0xb6, 0x73, 0x07, 0xf3, 0x8c, 0xd0,
    0xab, 0xd9, 0x12, 0x45, 0x70, 0x7c, 0x3a, 0x24, 0x64, 0xce, 0x9e, 0x38,
    0x4d, 0x5d, 0xe1, 0x9d, 0xf2, 0x4b, 0x58, 0xdc, 0x71, 0xb3, 0x61, 0x56,
    0x14, 0x62, 0x2a, 0x1b, 0x36, 0x5e, 0xc9, 0x15, 0xf3, 0x50, 0xe6, 0xc0,
    0x93, 0x62, 0xd0, 0x69, 0xab, 0xd4, 0xe5, 0x9b, 0xa6, 0xa7, 0xa3, 0x0c,
    0x51, 0xad, 0xf7, 0x38, 0x6f, 0x1d, 0xcf, 0x43, 0xda, 0x83, 0x95, 0xc6,
    0xfb, 0xd8, 0x90, 0x5e, 0x35, 0x30, 0x0b, 0x7b, 0x45, 0xd0, 0x12, 0x32,
    0x95, 0xc3, 0x96, 0xdc, 0x0a, 0x68, 0xcc, 0xcf, 0x19, 0x0b, 0x13, 0xc7,
    0x6a, 0x7a, 0x53, 0x36, 0x5b, 0x24, 0xc5, 0x84, 0x5c, 0xeb, 0x9e, 0xeb,
    0xdc, 0x91, 0x17, 0xb3, 0x29, 0xfd, 0xee, 0x55, 0xc9, 0x8c, 0xcd, 0xbe,
    0x3a, 0x66, 0xf3, 0xba, 0x79, 0xfe, 0xc7, 0xf8, 0x08, 0xeb, 0xd2, 0x3a,
    0x17, 0x3c, 0x36, 0x29, 0xc1, 0xde, 0xa9, 0xab, 0x80, 0xdb, 0x6c, 0xdd,
    0xfb, 0xe5, 0xb1, 0x12, 0x25, 0x2f, 0xa3, 0x3d, 0x0e, 0x72, 0xde, 0xaf,
    0x86, 0x93, 0x35, 0x18, 0x96, 0x19, 0x47, 0xfd, 0x8f, 0xae, 0x7b, 0xe7,
    0xac, 0x6e, 0x53, 0x10, 0x1e, 0x66, 0x54, 0xc0, 0x36, 0x0e, 0x73, 0x35,
    0xb3, 0x20, 0xf9, 0xaa, 0x25, 0x4a, 0x66, 0xaf, 0xc9, 0x2f, 0xd1, 0x19,
    0x8b, 0x8f, 0x93, 0xbe, 0x3a, 0x30, 0xa5, 0x24, 0xc2, 0xad, 0x30, 0xfc,
    0x97, 0xfe, 0x6c, 0xe0, 0x7f, 0x98, 0x71, 0x37, 0x33, 0x26, 0xc3, 0x75,
    0xc8, 0x51, 0xe6, 0xf2, 0x99, 0xf0, 0x0f, 0x7d, 0x5d, 0x12, 0x26, 0x9d,
    0x96, 0xeb, 0xd5, 0x08, 0x28, 0x34, 0x90, 0x1c, 0xdb, 0x98, 0xbd, 0x8a,
    0xeb, 0x93, 0x0d, 0xd0, 0x57, 0x3e, 0xb8, 0x65, 0xdd, 0xa6, 0xa9, 0x81,
    0xd6, 0xca, 0x62, 0x4b, 0x24, 0xed, 0xf4, 0x36, 0xf0, 0x83, 0xd6, 0x0e,
    0x53, 0xf2, 0x50, 0x89, 0x70, 0x23, 0x19, 0x7b, 0xd0, 0x7e, 0x67, 0xa3,
    0x45, 0x72, 0x9d, 0x11, 0xbe, 0xbb, 0xe1, 0x72, 0x51, 0xf6, 0x5f, 0x4e,
    0x2c, 0xca, 0x61, 0x3d, 0xaa, 0xfd, 0xb7, 0x61, 0xbc, 0x3a, 0xd2, 0x20,
    0x18, 0xa2, 0xee, 0x04, 0xe4, 0x6b, 0xf3, 0x84, 0x26, 0xc2, 0x43, 0xa4,
    0xfe, 0x4e, 0x14, 0x5c, 0xbe, 0xe7, 0x11, 0x4a, 0x61, 0x33, 0x7d, 0xeb,
    0x71, 0x98, 0x7c, 0xf0, 0x44, 0xe2, 0x41, 0x17, 0x39, 0xd0, 0x4e, 0xe2,
    0x9c, 0xcc, 0x8d, 0x76, 0x3c, 0xb8, 0x0f, 0x63, 0x4a, 0x56, 0x7c, 0xf8,
    0xab, 0xbd, 0x87, 0xcc, 0xa2, 0x29, 0xb9, 0x3c, 0xcc, 0x12, 0xd2, 0x9d,
    0x6f, 0xbd, 0x28, 0xc3, 0x0c, 0x2f, 0x83, 0x8c, 0xf3, 0xad, 0x3d, 0xc6,
    0x92, 0xba, 0x0b, 0x28, 0x47, 0x81, 0x78, 0xbe, 0x2b, 0xe0, 0x6a, 0x47,
    0xba, 0xf3, 0xbe, 0x39, 0x30, 0x49, 0x0b, 0x35, 0x34, 0x80, 0x70, 0xc2,
    0x75, 0x54, 0x65, 0xd8, 0xc8, 0x1c, 0x26, 0xb8, 0x97, 0x61, 0x57, 0xcf,
    0x2d, 0xb8, 0xd1, 0xdd, 0xb0, 0xf1, 0xa9, 0x0f, 0x3f, 0x7e, 0xfe, 0xd3,
    0xee, 0xdc, 0x75, 0xbf, 0xc2, 0xf1, 0x30, 0xd6, 0x60, 0x1b, 0xcd, 0x7b,
    0x87, 0xde, 0x0b, 0x58, 0x5c, 0xac, 0x84, 0xda, 0xef, 0x86, 0x86, 0x8d,
    0x8e, 0xfd, 0x6f, 0x93, 0x32, 0x8d, 0xac, 0x7b, 0x8f, 0x2a, 0x8a, 0x5f,
    0xf1, 0xea, 0xbb, 0x8e, 0x6d, 0xbf, 0xe0, 0x59, 0x90, 0xc2, 0xd3, 0x3d,
    0x8a, 0x03, 0x64, 0x11, 0xdd, 0xf1, 0xfc, 0x2d, 0x26, 0x8a, 0x6f, 0x39,
    0x25, 0xa9, 0xaa, 0x61, 0x45, 0x5b, 0x7b, 0x36, 0xfd, 0x82, 0xd2, 0x6a,
    0x8c, 0x9a, 0xf1, 0xc2};

const std::vector<uint8_t> EpidVerifierTest::kGroupRlEmptyBuf = {
    // RLVer
    0x00, 0x00, 0x00, 0x00,
    // n3
    0x00, 0x00, 0x00, 0x00};

const std::vector<uint8_t> EpidVerifierTest::kGroupRl3GidBuf = {
    // RLVer
    0x00, 0x00, 0x00, 0x03,
    // n3
    0x00, 0x00, 0x00, 0x03,
    // gid[0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01,
    // gid[1]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02,
    // gid[2]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03,
};

const std::vector<uint8_t> EpidVerifierTest::kGroupRl3GidN0Buf = {
    // RLVer
    0x00, 0x00, 0x00, 0x03,
    // n3
    0x00, 0x00, 0x00, 0x00,
    // gid[0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01,
    // gid[1]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02,
    // gid[2]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03,
};

const std::vector<uint8_t> EpidVerifierTest::kGroupRl3GidN2Buf = {
    // RLVer
    0x00, 0x00, 0x00, 0x03,
    // n3
    0x00, 0x00, 0x00, 0x02,
    // gid[0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01,
    // gid[1]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02,
    // gid[2]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03,
};

const std::vector<uint8_t> EpidVerifierTest::kGroupRl3GidN4Buf = {
    // RLVer
    0x00, 0x00, 0x00, 0x03,
    // n3
    0x00, 0x00, 0x00, 0x04,
    // gid[0]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01,
    // gid[1]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x02,
    // gid[2]
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03,
};

const std::vector<uint8_t> EpidVerifierTest::kGrp01VerRlOneEntry = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x2A,
    // B
    0x41, 0x63, 0xfd, 0x06, 0xb8, 0xb1, 0xa6, 0x32, 0xa5, 0xe3, 0xeb, 0xc4,
    0x40, 0x11, 0x37, 0xc0, 0x62, 0x0d, 0xe1, 0xca, 0xe9, 0x79, 0xad, 0xff,
    0x1d, 0x13, 0xb3, 0xda, 0xa0, 0x10, 0x8a, 0xa8, 0x30, 0x72, 0xa4, 0xe8,
    0x27, 0xb5, 0xad, 0xdb, 0xac, 0x89, 0xd8, 0x37, 0x79, 0xd9, 0x8c, 0xd0,
    0xb3, 0xef, 0x94, 0x17, 0x4f, 0x05, 0x53, 0x4c, 0x4d, 0xf0, 0x77, 0xf7,
    0xb6, 0xaf, 0xb8, 0xfa,
    // version
    0x00, 0x00, 0x00, 0x01,
    // n4
    0x00, 0x00, 0x00, 0x01,
    // k's
    0xdc, 0x41, 0x24, 0xe7, 0xb8, 0xf2, 0x6d, 0xc4, 0x01, 0xf9, 0x5d, 0xf8,
    0xd9, 0x23, 0x32, 0x29, 0x0a, 0xe1, 0xf6, 0xdc, 0xa1, 0xef, 0x52, 0xf7,
    0x3a, 0x3c, 0xe6, 0x7e, 0x3d, 0x0e, 0xe8, 0x86, 0xa9, 0x58, 0xf4, 0xfe,
    0xfa, 0x8b, 0xe4, 0x1c, 0xad, 0x58, 0x5b, 0x1c, 0xc7, 0x54, 0xee, 0x7e,
    0xe7, 0x12, 0x6a, 0x4b, 0x01, 0x63, 0xb4, 0xdb, 0x6e, 0xe7, 0x7a, 0xe9,
    0x62, 0xa5, 0xb4, 0xe3};
const std::vector<uint8_t> EpidVerifierTest::kEmptyGrp01VerRl = {
    // gid
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x2A,
    // B
    0xa6, 0x13, 0x29, 0xb6, 0x61, 0xa2, 0xb8, 0xd7, 0x49, 0x86, 0xcb, 0xaf,
    0x94, 0x4d, 0x9e, 0x51, 0xcf, 0xd3, 0x5d, 0x0f, 0x33, 0x9a, 0x59, 0x0d,
    0xe7, 0xc9, 0xb9, 0x7f, 0x83, 0xae, 0x27, 0xe6, 0x40, 0xf0, 0x88, 0x13,
    0xe2, 0xb6, 0x6a, 0x43, 0x26, 0xa3, 0x21, 0xea, 0x00, 0x78, 0xcd, 0xce,
    0x0e, 0x14, 0x7a, 0xde, 0xcf, 0xaa, 0x7b, 0xc5, 0x7e, 0x7c, 0xaf, 0xe4,
    0x5e, 0x8a, 0xdd, 0xc7,
    // version
    0x00, 0x00, 0x00, 0x00,
    // n4
    0x00, 0x00, 0x00, 0x00,
    // no k's
};
const Epid2Params EpidVerifierTest::kParamsStr = {
#include "epid/common/src/epid2params_ate.inc"
};
const GroupPubKey EpidVerifierTest::kGrp01Key = {
#include "epid/common-testhelper/testdata/grp01/gpubkey.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrp01PrivRl = {
#include "epid/common-testhelper/testdata/grp01/privrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrp01SigRl = {
#include "epid/common-testhelper/testdata/grp01/sigrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sigrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kEmptySigRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sigrl_empty.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrp01VerRl = {
#include "epid/common-testhelper/testdata/grp01/verrl.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha256RandombaseTest0 = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test0_sha256_sigrl.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha512kBsn0Data_0_255 = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_bsn0_msg_0_255_sha512.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigMember0Sha256RandombaseMsg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_msg0_sha256_sigrl.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha384RandombaseTest0 = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test0_sha384_sigrl.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha512RandombaseTest0 = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test0_sha512_sigrl.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXMember0Sha512256RandombaseMsg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_256_rndbase_msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha256RandombaseTest1NoSigRl = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test1_sha256.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha256Basename1Test1NoSigRl = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test1_basename1_sha256.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigSha256Basename1Test1NoSigRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_test1_basename1_sha256.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha384RandombaseTest1NoSigRl = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test1_sha384.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrp01Member0Sha512RandombaseTest1NoSigRl = {
#include "epid/common-testhelper/testdata/grp01/member0/sig_test1_sha512.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXMember0Sha512256RandombaseMsg0NoSigRl = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_256_rndbase_msg0_no_sigrl.inc"
};

const std::vector<uint8_t> EpidVerifierTest::kTest0 = {
    't', 'e', 's', 't', ' ', 'm', 'e', 's', 's', 'a', 'g', 'e', 0x0};
const std::vector<uint8_t> EpidVerifierTest::kTest1 = {'t', 'e', 's', 't', '1'};
const std::vector<uint8_t> EpidVerifierTest::kBasename = {'b', 'a', 's', 'e',
                                                          'n', 'a', 'm', 'e'};
const std::vector<uint8_t> EpidVerifierTest::kBasename1 = {
    'b', 'a', 's', 'e', 'n', 'a', 'm', 'e', '1'};

const std::vector<uint8_t> EpidVerifierTest::kData_0_255 = {
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
    0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23,
    0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
    0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53,
    0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b,
    0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83,
    0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b,
    0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
    0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3,
    0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb,
    0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
    0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3,
    0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb,
    0xfc, 0xfd, 0xfe, 0xff,
};
const OctStr32 EpidVerifierTest::kOctStr32_1 = {0x00, 0x00, 0x00, 0x01};

const GroupPubKey EpidVerifierTest::kPubKeySigRlVerify = {
#include "epid/verifier/unittests/testdata/sigrl/pub_key_sigrl_verify.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigRlSingleEntry = {
#include "epid/verifier/unittests/testdata/sigrl/sigrl_single_entry.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigRlFiveEntries = {
#include "epid/verifier/unittests/testdata/sigrl/sigrl_five_entries.inc"
};
const EpidSignature EpidVerifierTest::kSignatureSigrlFirst = {
#include "epid/verifier/unittests/testdata/sigrl/signature_sigrl_first.inc"
};
const EpidSignature EpidVerifierTest::kSignatureSigrlMiddle = {
#include "epid/verifier/unittests/testdata/sigrl/signature_sigrl_middle.inc"
};
const EpidSignature EpidVerifierTest::kSignatureSigrlLast = {
#include "epid/verifier/unittests/testdata/sigrl/signature_sigrl_last.inc"
};

const std::vector<uint8_t> EpidVerifierTest::kGrpRl = {
#include "epid/common-testhelper/testdata/grprl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/grprl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpRlRevokedGrpXOnlyEntry = {
#include "epid/common-testhelper/testdata/grprl_single_entry_revoked_grp_x.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpRlRevokedGrpXFirstEntry = {
#include "epid/common-testhelper/testdata/grprl_revoked_grp_x_first_entry.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpRlRevokedGrpXMiddleEntry = {
#include "epid/common-testhelper/testdata/grprl_revoked_grp_x_middle_entry.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpRlRevokedGrpXLastEntry = {
#include "epid/common-testhelper/testdata/grprl_revoked_grp_x_last_entry.inc"
};

const std::vector<uint8_t> EpidVerifierTest::kBsn0 = {'b', 's', 'n', '0'};
const std::vector<uint8_t> EpidVerifierTest::kMsg0 = {'m', 's', 'g', '0'};

const GroupPubKey EpidVerifierTest::kGrpXKey = {
#include "epid/common-testhelper/testdata/grp_x/pubkey.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXPrivRl = {
#include "epid/common-testhelper/testdata/grp_x/privrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXCorruptedPrivRl = {
#include "epid/common-testhelper/testdata/grp_x/corrupted_privrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kPrivRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/privrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kEmptyPrivRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/privrl_empty.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kGrpXPrivRlRevokedPrivKey000OnlyEntry = {
#include "epid/common-testhelper/testdata/grp_x/privrl_single_entry_revoked_key000.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXSigRl = {
#include "epid/common-testhelper/testdata/grp_x/sigrl.inc"
};

const std::vector<uint8_t> EpidVerifierTest::kGrpXSigRlVersion2 = {
#include "epid/common-testhelper/testdata/grp_x/sigrl_ver_2.inc"
};

const std::vector<uint8_t>
    EpidVerifierTest::kGrpXSigRlMember0Sha256Bsn0Msg0OnlyEntry = {
#include "epid/common-testhelper/testdata/grp_x/sigrl_single_entry.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kGrpXSigRlMember0Sha256Bsn0Msg0FirstEntry = {
#include "epid/common-testhelper/testdata/grp_x/sigrl_member0_sig_sha256_bsn0_msg0_revoked_first_entry.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kGrpXSigRlMember0Sha256Bsn0Msg0MiddleEntry = {
#include "epid/common-testhelper/testdata/grp_x/sigrl_member0_sig_sha256_bsn0_msg0_revoked_middle_entry.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kGrpXSigRlMember0Sha256Bsn0Msg0LastEntry = {
#include "epid/common-testhelper/testdata/grp_x/sigrl_member0_sig_sha256_bsn0_msg0_revoked_last_entry.inc"
};

const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn0Sha256VerRl = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/verrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn0Sha384VerRl = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/verrl_sha384.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn0Sha512VerRl = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/verrl_sha512.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn0Sha512256VerRl = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/verrl_sha512_256.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn0VerRlSingleEntry = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/verrl_1entry.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn1VerRl = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn1/verrl.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kGrpXBsn1VerRl_012 = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn1/verrl_012revoked.inc"
};
// clang-format off
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXVerRevokedMember0Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/sig_revoked0sha256bsn0msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXVerRevokedMember1Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/sig_revoked1sha256bsn0msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXVerRevokedMember2Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn0/sig_revoked2sha256bsn0msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXVerRevokedMember3Sha256Bsn1Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/verrevoked/bsn1/sig_revoked3sha256bsn1msg0.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember0Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_bsn0_msg0.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigMember0Sha256Bsn0Msg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sha256_bsn0_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigMember0Sha256Bsn0Msg0EmptySigRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sha256_bsn0_msg0_empty_sigrl.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigMember0Sha256Bsn0Msg0NoSigRlIkgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sha256_bsn0_msg0_nosigrl.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigRevSigMember0Sha256Bsn0Msg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sigrevoked_sha256_bsn0_msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kRevGroupSigMember0Sha256Bsn0Msg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupb/sig_grouprevoked_sha256_bsn0_msg0.inc"
};
const std::vector<uint8_t>
    EpidVerifierTest::kSigGrpXMember0Sha256Bsn0Msg0SingleEntrySigRl = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_bsn0_msg0_rl_singleentry.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXRevokedPrivKey000Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/privrevoked/signatures/sig_sha256_bsn0_msg0_revkey000.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigRevokedPrivKeySha256Bsn0Msg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sha256_bsn0_msg0_revkey.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXRevokedPrivKey001Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/privrevoked/signatures/sig_sha256_bsn0_msg0_revkey001.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXRevokedPrivKey002Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/privrevoked/signatures/sig_sha256_bsn0_msg0_revkey002.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember0Sha256Bsn0Msg1 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_bsn0_msg1.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember0Sha256Bsn1Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_bsn1_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha256RandbaseMsg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_rndbase_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigMember0Sha256RandbaseMsg0Ikgf = {
#include "epid/common-testhelper/testdata/ikgf/groupa/sig_sha256_rndbase_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha256RandbaseMsg1 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha256_rndbase_msg1.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember0Sha384Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha384_bsn0_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha384RandbaseMsg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha384_rndbase_msg0.inc"
};
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember0Sha512Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_bsn0_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha512HugeBsnMsg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_huge_bsn_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha512RandbaseMsg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_rndbase_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha512256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member0/sig_sha512_256_bsn0_msg0.inc"
};
const std::vector<uint8_t>
EpidVerifierTest::kSigGrpXMember0Sha512256RandbaseMsg0 =
                  kSigGrpXMember0Sha512256RandombaseMsg0;
const std::vector<uint8_t> EpidVerifierTest::kSigGrpXMember1Sha256Bsn0Msg0 = {
#include "epid/common-testhelper/testdata/grp_x/member1/sig_sha256_bsn0_msg0.inc"
};
