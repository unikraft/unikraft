/*############################################################################
# Copyright 2017 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
############################################################################*/
/// Unit tests of SHA-512 implementation.
/*! \file */

#include <gtest/gtest.h>

namespace {
extern "C" {
#include "epid/member/tiny/math/sha512.h"
}

TEST(TinySha512Test, WorksGivenTinyTestVector1) {
  const uint8_t expected[SHA512_DIGEST_SIZE] = {
      0xdd, 0xaf, 0x35, 0xa1, 0x93, 0x61, 0x7a, 0xba, 0xcc, 0x41, 0x73,
      0x49, 0xae, 0x20, 0x41, 0x31, 0x12, 0xe6, 0xfa, 0x4e, 0x89, 0xa9,
      0x7e, 0xa2, 0x0a, 0x9e, 0xee, 0xe6, 0x4b, 0x55, 0xd3, 0x9a, 0x21,
      0x92, 0x99, 0x2a, 0x27, 0x4f, 0xc1, 0xa8, 0x36, 0xba, 0x3c, 0x23,
      0xa3, 0xfe, 0xeb, 0xbd, 0x45, 0x4d, 0x44, 0x23, 0x64, 0x3c, 0xe8,
      0x0e, 0x2a, 0x9a, 0xc9, 0x4f, 0xa5, 0x4c, 0xa4, 0x9f};
  const char* m = "abc";
  uint8_t digest[SHA512_DIGEST_SIZE];
  sha512_state s;

  tinysha512_init(&s);
  tinysha512_update(&s, (const uint8_t*)m, strlen(m));
  tinysha512_final(digest, &s);
  EXPECT_TRUE(0 == memcmp(expected, digest, sizeof(digest)))
      << digest << std::endl
      << expected;
}

TEST(TinySha512Test, WorksGivenTinyTestVector2) {
  const uint8_t expected[SHA512_DIGEST_SIZE] = {
      0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28,
      0x50, 0xd6, 0x6d, 0x80, 0x07, 0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57,
      0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce, 0x47,
      0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2,
      0x87, 0x7e, 0xec, 0x2f, 0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a,
      0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e};
  const char* m = "";
  uint8_t digest[SHA512_DIGEST_SIZE];
  sha512_state s;

  tinysha512_init(&s);
  tinysha512_update(&s, (const uint8_t*)m, strlen(m));
  tinysha512_final(digest, &s);
  EXPECT_TRUE(0 == memcmp(expected, digest, sizeof(digest)))
      << digest << std::endl
      << expected;
}

TEST(TinySha512Test, WorksGivenTinyTestVector3) {
  const uint8_t expected[SHA512_DIGEST_SIZE] = {
      0x20, 0x4a, 0x8f, 0xc6, 0xdd, 0xa8, 0x2f, 0x0a, 0x0c, 0xed, 0x7b,
      0xeb, 0x8e, 0x08, 0xa4, 0x16, 0x57, 0xc1, 0x6e, 0xf4, 0x68, 0xb2,
      0x28, 0xa8, 0x27, 0x9b, 0xe3, 0x31, 0xa7, 0x03, 0xc3, 0x35, 0x96,
      0xfd, 0x15, 0xc1, 0x3b, 0x1b, 0x07, 0xf9, 0xaa, 0x1d, 0x3b, 0xea,
      0x57, 0x78, 0x9c, 0xa0, 0x31, 0xad, 0x85, 0xc7, 0xa7, 0x1d, 0xd7,
      0x03, 0x54, 0xec, 0x63, 0x12, 0x38, 0xca, 0x34, 0x45};
  const char* m = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
  uint8_t digest[SHA512_DIGEST_SIZE];
  sha512_state s;

  tinysha512_init(&s);
  tinysha512_update(&s, (const uint8_t*)m, strlen(m));
  tinysha512_final(digest, &s);
  EXPECT_TRUE(0 == memcmp(expected, digest, sizeof(digest)))
      << digest << std::endl
      << expected;
}

TEST(TinySha512Test, WorksGivenTinyTestVector4) {
  const uint8_t expected[SHA512_DIGEST_SIZE] = {
      0x8e, 0x95, 0x9b, 0x75, 0xda, 0xe3, 0x13, 0xda, 0x8c, 0xf4, 0xf7,
      0x28, 0x14, 0xfc, 0x14, 0x3f, 0x8f, 0x77, 0x79, 0xc6, 0xeb, 0x9f,
      0x7f, 0xa1, 0x72, 0x99, 0xae, 0xad, 0xb6, 0x88, 0x90, 0x18, 0x50,
      0x1d, 0x28, 0x9e, 0x49, 0x00, 0xf7, 0xe4, 0x33, 0x1b, 0x99, 0xde,
      0xc4, 0xb5, 0x43, 0x3a, 0xc7, 0xd3, 0x29, 0xee, 0xb6, 0xdd, 0x26,
      0x54, 0x5e, 0x96, 0xe5, 0x5b, 0x87, 0x4b, 0xe9, 0x09};
  const char* m =
      "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnop"
      "jklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
  uint8_t digest[SHA512_DIGEST_SIZE];
  sha512_state s;

  tinysha512_init(&s);
  tinysha512_update(&s, (const uint8_t*)m, strlen(m));
  tinysha512_final(digest, &s);
  EXPECT_TRUE(0 == memcmp(expected, digest, sizeof(digest)))
      << digest << std::endl
      << expected;
}

}  // namespace
