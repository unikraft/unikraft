/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {

#ifndef __QL_QV_COLLATERAL_T
#define __QL_QV_COLLATERAL_T
struct _sgx_ql_qve_collateral_t
{
	uint32_t version;                       ///< The version of PCCS/PCS API used to retrieve verification collateral.
                                            ///< For V1 and V2 APIs, the ‘version’ field with have a value of 1.
                                            ///< For V3 APIs, the ‘version’ field will have the value of 3

	uint32_t tee_type;                      ///<  0x00000000: SGX or 0x00000081: TDX

    [size = pck_crl_issuer_chain_size] char *pck_crl_issuer_chain;             ///< concatenated PEM format - the order
                                            ///< as it is returned from PCS (root ca +
                                            ///< signing cert)
    uint32_t pck_crl_issuer_chain_size;

    [size = root_ca_crl_size] char *root_ca_crl;                      ///< CRL for certs signed by root cert
    uint32_t root_ca_crl_size;

    [size = pck_crl_size] char *pck_crl;                          ///< CRL for PCK leaf certs.
    uint32_t pck_crl_size;

    [size = tcb_info_issuer_chain_size] char *tcb_info_issuer_chain;            ///< concatenated PEM format - the order
                                            ///< as it is returned from PCS (root ca +
                                            ///< signing cert)
    uint32_t tcb_info_issuer_chain_size;

    [size = tcb_info_size] char *tcb_info;                         ///< TCB Info structure
    uint32_t tcb_info_size;

    [size = qe_identity_issuer_chain_size] char *qe_identity_issuer_chain;         ///< concatenated PEM format - the order
                                            ///< as it is returned from PCS (root ca +
                                            ///< signing cert)
    uint32_t qe_identity_issuer_chain_size;

    [size = qe_identity_size] char *qe_identity;                      ///< QE Identity Structure
    uint32_t qe_identity_size;

};
#endif //__QL_QV_COLLATERAL_T



	include "sgx_qve_header.h"
	include "sgx_qve_def.h"

    from "sgx_tstdc.edl" import *;

#ifdef __GNUC__
    from "sgx_pthread.edl" import *;
#endif

    /* Import ECALL/OCALL from sub-directory EDLs.
     *  [from]: specifies the location of EDL file.
     *  [import]: specifies the functions to import,
     *  [*]: implies to import all functions.
     */
    trusted {
	public quote3_error_t get_fmspc_ca_from_quote([in, size=quote_size] const uint8_t* quote, uint32_t quote_size,
                                                  [out, size=fmsp_from_quote_size] unsigned char* fmsp_from_quote,
                                                  uint32_t fmsp_from_quote_size,
                                                  [out, size=ca_from_quote_size] unsigned char* ca_from_quote, uint32_t ca_from_quote_size);

	public quote3_error_t sgx_qve_get_quote_supplemental_data_size([out, count=1] uint32_t *p_data_size);

	public quote3_error_t sgx_qve_get_quote_supplemental_data_version([out, count=1] uint32_t *p_version);

	public quote3_error_t sgx_qve_verify_quote([in, size=quote_size] const uint8_t *p_quote,
                                               uint32_t quote_size,
                                               [in, count=1] const struct _sgx_ql_qve_collateral_t *p_quote_collateral,
                                               time_t expiration_check_date,
                                               [out, count=1] uint32_t *p_collateral_expiration_status,
                                               [out, count=1]sgx_ql_qv_result_t *p_quote_verification_result,
                                               [in, out, count=1]sgx_ql_qe_report_info_t *p_qve_report_info,
                                               uint32_t supplemental_data_size,
                                               [out, size=supplemental_data_size] uint8_t *p_supplemental_data);


	};



};
