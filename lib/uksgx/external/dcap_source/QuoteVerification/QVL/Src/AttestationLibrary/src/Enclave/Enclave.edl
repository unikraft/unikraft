/*
 * Copyright (C) 2011-2021 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

enclave {
    from "sgx_tsgxssl.edl" import *;

    include "time.h"

	trusted {
        /* define ECALLs here. */
        /*  [in]: copy the string buffer to App outside.
         *  [string]: specifies 'str' is a NULL terminated buffer.
         */
		public void  sgxEnclaveAttestationGetVersion([out, size=len] char *version, size_t len);
		public int   sgxAttestationVerifyEnclaveIdentity([in, string] const char *qeIdentity,
		                                                 [in, string] const char *pemCertChain,
		                                                 [in, string] const char *pemRootCaCrl,
		                                                 [in, string] const char *pemRootCaCertificate,
		                                                 [in] const time_t* expirationDate);

		public int   sgxAttestationVerifyQuote([in, size=quoteSize] const uint8_t* quote,
		                                       uint32_t quoteSize,
		                                       [in, string] const char *pemPckCertificate,
		                                       [in, string] const char* intermediateCrl,
		                                       [in, string] const char* tcbInfoJson,
		                                       [in, string] const char* qeIdentityJson);

		public int   sgxAttestationVerifyPCKCertificate([in, string] const char *pemCertChain,
		                                                [in, count=2] char **crls,
		                                                [in, string] const char *pemRootCaCertificate,
		                                                [in] const time_t* expirationDate);

        public int   sgxAttestationVerifyTCBInfo([in, string] const char *tcbInfo,
                                                 [in, string] const char *pemCertChain,
                                                 [in, string] const char *pemRootCaCrl,
                                                 [in, string] const char *pemRootCaCertificate,
                                                 [in] const time_t* expirationDate);


    };

    untrusted {
        /* define OCALLs here. */
    };
};
